package cata_frutas;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.BufferedReader;
import java.io.Writer;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicScrollBarUI;

import cata_frutas.Elementos.Elemento;
import cata_frutas.Elementos.Elementos_Dinâmicos.*;
import cata_frutas.Elementos.Elementos_Estáticos.*;






public class Frame extends JFrame {

	/* Inicialização dos objetos utilizados na construção dos painéis, variam desde
	frames, painéis, labels, scrolls, caixas de texto, caixas de saida, cores e bordas.
	*/
	private static final long serialVersionUID = 1L;
	private static JPanel painelPrimario;
	private static JPanel painelInicial;
	private static JPanel painelIniciarJogo;
	private static JPanel painelCriaçãoTerreno;
	private static JPanel painelImportarTerreno;
	private static CustomPanel painelTerrenoExemplo;
	private static JPanel painelInstrução;
	private static CustomPanel painelJogo;
	
	private static JFrame frameIN;
	
	public JLabel logo;
	public JLabel caixaSaidas;
	public JLabel caixaSaidas2;
	public JLabel caixaNoticias;
	
	public JScrollPane scroll;
	public JScrollPane scrollInstrucoes;
	public JScrollPane scrollIM;
	public JScrollPane scrollTE;
	public JScrollPane scrollTE2;
	public JScrollPane scrollNoticias;

	public StringBuilder consoleBuffer;
	
	JTextArea caixaTexto;
	JTextArea caixaTexto2;
	JTextArea caixaInstru;
	JTextField caixaTexto3;
	
	
	GridBagConstraints gbc; 
	
	
	public Botoes botaoIJ;
	public Botoes botaoMJ;
	public Botoes botaoIN;
	public Botoes botaoT;
	public Botoes botaoRI;
	public Botoes botaoCT;
	public Botoes botaoIT;
	public Botoes botaoEN;
	public Botoes botaoTE;
	public Botoes botaoRC;
	public Botoes botaoC;
	public Botoes botaoStart;
	public Botoes botaoRT;
	public Botoes botaoST;
	public Botoes botaoNT;
	public Botoes botaoRI2;
	
	
	public static Color cor1 = new Color(255,238,138);
	public static Color cor2 = new Color(0,0,0);
	public static LineBorder borda1 = new LineBorder(cor2);
	public static LineBorder borda2 = new LineBorder(cor1);
	
	public static ImageIcon imgLogo = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\Logo.png");
	
	
	// Inicialização das imagens principais, que serão redimensionadas na geração do terreno
	ImageIcon imgPjogador1 = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\UpView guy-1.png");
    ImageIcon imgPjogador2 = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\UpView guy-2.png");
    ImageIcon imgPArvoreAbacate = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreAbacate.png");
    ImageIcon imgPArvoreAmora = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreAmora.png");
    ImageIcon imgPArvoreLaranja = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreLaranja.png");
    ImageIcon imgPArvoreAcerola= new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\arvoreAcerola.png");
    ImageIcon imgPArvoreGoiaba= new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreGoiaba.png");
    ImageIcon imgPArvoreCoco = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreCoco.png");
    ImageIcon imgPFrutaMaracuja = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\maracuja.png");
    ImageIcon imgPFrutaLaranja = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\laranja.png"); 
    ImageIcon imgPFrutaAbacate = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\abacate.png");
    ImageIcon imgPFrutaGoiaba = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\goiaba.png");
    ImageIcon imgPFrutaAmora = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\amora.png");
    ImageIcon imgPFrutaCoco = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\coco.png");
    ImageIcon imgPFrutaAcerola = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\acerola.png");
    ImageIcon imgPgrama = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama.jpeg");
    ImageIcon imgPPedra= new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\pedra.png");
    
    public static ImageIcon imgjogador1;
    public static ImageIcon imgjogador2;
    public static ImageIcon imgArvoreAbacate;
    public static ImageIcon imgArvoreAmora;
    public static ImageIcon imgArvoreLaranja;
    public static ImageIcon imgArvoreAcerola;
    public static ImageIcon imgArvoreGoiaba;
    public static ImageIcon imgArvoreCoco;
    public static ImageIcon imgFrutaMaracuja;
    public static ImageIcon imgFrutaLaranja; 
    public static ImageIcon imgFrutaAbacate;
    public static ImageIcon imgFrutaGoiaba;
    public static ImageIcon imgFrutaAmora;
    public static ImageIcon imgFrutaCoco;
    public static ImageIcon imgFrutaAcerola;
    public static ImageIcon imggrama;
    public static ImageIcon imgPedra;
    
    public static int painel = 0;
    public static int botoesAtivados = 0;
    
	
	/*Inicialização dos objetos que serão utilizados na construção do terreno, na 
	 * importação do terreno, e no salvamento do arquivo com as entradas. 
	 * Variam desde inteiros, Strings e booleanos.
	 */
	
	public static String nomeArquivo;
	
	//Arraylist utilizada para a atualização das cores dos botões na mudança de interface.
	public ArrayList<Botoes> listaBotoes;
	
	public static Terreno terreno;
	
	public static int Dimensao;
	public static int Pedras;
	public static int[] Arvores;
	public static int[] Frutas;
	public static int Mochila;
	public static float Bichada;
	public static int frutasTotais;
	public static int arvoresTotais;
	public static int  corGrama = 1;
	public String userInput;
	
	public static JLabel[][] celulas;
	
	public static boolean uiaceita = false;
	public static String memoriaEN[][] = new String[11][3];
	public static int xbtn = 0;
	public static int ybtn = 0;
	
	
	
	//Inicialização das Classes do jogo
	
	public static Elemento[][] MatrizJogo;
	
	public static Jogador[] jogadores = new Jogador[2];
	
	public static int contadorTurno = 0;
	
	//Criação de uma classe chamada Botoes com o intuito de facilitar a criação dos botões.
	//Também é utilizada para chamar o método que atualiza a cor dos botões, plano de fundos e textos.
	
	class Botoes extends JButton{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		public int cont = 1;
		
		//Construtor da clase Botoes.
		public Botoes(String text, Color cor1, Color cor2, LineBorder borda1, LineBorder borda2, int x, int y) {
		
			this.setText(text);
			this.setBackground(cor1);
			this.setForeground(cor2);
			this.setBorder(borda1);
			this.setBounds(x, y, 120, 40);
			this.setFocusPainted(false);
			this.setFont(new Font("Segoe UI Semibold", Font.ITALIC, 12));
			this.hover();
			
			
		}
		
		
		//Método auxiliar para atalizar a cor dos botões
		public void update(Color cor1, Color cor2, LineBorder borda1, LineBorder borda2) {
			this.setBackground(cor1);
			this.setForeground(cor2);
			this.setBorder(borda1);
			this.hover();
		}
		
		//Método que permite a mudança de cores ao passar o mouse por cima do botão
		public void hover() {
			this.addMouseListener(new MouseAdapter() {
	            @Override
	            public void mouseEntered(MouseEvent e) {
	                // Alterar a cor ao passar o mouse (hover)
	                Botoes.this.setBackground(cor2);
	                Botoes.this.setForeground(cor1);
	                Botoes.this.setBorder(borda2);
	            }

	            @Override
	            public void mouseExited(MouseEvent e) {
	                // Voltar à cor original quando o mouse sair
	            	Botoes.this.setBackground(cor1);
	            	Botoes.this.setForeground(cor2);
	            	Botoes.this.setBorder(borda1);
	            }
			});
		}
		
		//Método que atualiza as cores dos planos de fundos, textos e botões.
		public void mode(ArrayList<Botoes> listaBotoes) {
			Color var = cor1;
			LineBorder var2 = new LineBorder(cor2);
			cor1 = cor2;
			cor2 = var;
			var = cor1;
			
			borda1 = borda2;
			borda2 = var2;
			var2 = borda1;
			
			painelPrimario.setBackground(cor1);
			painelIniciarJogo.setBackground(cor1);
			painelInstrução.setBackground(cor1);
			painelInicial.setBackground(cor1);
			painelCriaçãoTerreno.setBackground(cor1);
			painelImportarTerreno.setBackground(cor1);
			painelTerrenoExemplo.setBackground(cor1);
			caixaSaidas.setForeground(cor2);
			caixaSaidas2.setForeground(cor2);
			caixaInstru.setForeground(cor2);
			scrollInstrucoes.setBorder(borda1);
			if(corGrama == 1) {
				corGrama = 0;
				painelTerrenoExemplo.updateImagem("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama +".png");
				painelJogo.updateImagem("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama +".png");
			}
			else {
				corGrama = 1;
				painelTerrenoExemplo.updateImagem("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama +".jpg");
				painelJogo.updateImagem("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama +".png");
			}
			logo.setForeground(cor2);
			for(int i = 0; i < listaBotoes.size(); i++) {
				listaBotoes.get(i).update(cor1, cor2, borda1, borda2);
			}
		}
		
	}

	
	/**
	 * Começa o código.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Frame frame = new Frame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	
	

	/**
	 * Cria o frame.
	 */
	public Frame() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(600,400);
		setLocationRelativeTo(null);
		setResizable(false);
		setIconImage(imgLogo.getImage());
		setTitle("Cata Frutas");
		inicializa();
		
		
	}
	
	//Função que incializa desde os painéis, aos botões, as ações que cada um deles realizam,
	//as caixas de texto, as caixas de saída e os labels.
	public void inicializa() {

	    // Painel principal onde os outros componentes serão adicionados
	    painelPrimario = new JPanel();
	    painelPrimario.setBorder(new EmptyBorder(5, 5, 5, 5)); // Define uma borda vazia com preenchimento
	    painelPrimario.setBackground(cor1); // Define a cor de fundo do painel
	    painelPrimario.setBounds(0, 0, 600, 400); // Define o tamanho e a posição do painel
	    painelPrimario.setLayout(new BorderLayout(0, 0)); // Utiliza o layout BorderLayout para organizar os componentes

	    // Logo que será exibido no topo da tela
	    logo = new JLabel("Cata Frutas");
	    logo.setHorizontalAlignment(SwingConstants.CENTER); // Alinha o texto ao centro
	    logo.setFont(new Font("Georgia", Font.ITALIC, 48)); // Define a fonte do texto
	    logo.setForeground(cor2); // Define a cor do texto
	    logo.setIcon(null); // Não há ícone associado ao rótulo
	    logo.setBounds(10, 10, painelPrimario.getX(), painelPrimario.getY()); // Define a posição e o tamanho do rótulo, mas isso não afeta pois o BorderLayout cuida disso
	    painelPrimario.add(logo, BorderLayout.NORTH); // Adiciona o logo no topo do painel principal (região Norte)

	    // Painel inicial central onde outros componentes podem ser adicionados
	    painelInicial = new JPanel();
	    painelInicial.setBackground(new Color(255, 238, 138)); // Define a cor de fundo do painel
	    painelInicial.setLayout(null); // Usa um layout nulo, permitindo que os componentes sejam posicionados manualmente
	    painelPrimario.add(painelInicial, BorderLayout.CENTER); // Adiciona o painel central no painel principal

	    // Painel para opções de iniciar jogo, ainda sem componentes adicionados
	    painelIniciarJogo = new JPanel();
	    painelIniciarJogo.setLayout(null); // Layout nulo para posicionamento manual dos componentes
	    painelIniciarJogo.setBackground(painelPrimario.getBackground()); // Cor de fundo igual ao painel principal

	    // Painel de instruções, sem componentes no momento
	    painelInstrução = new JPanel();
	    painelInstrução.setLayout(null);
	    painelInstrução.setBackground(cor1); // Usa a cor cor1 definida anteriormente

	    // Painel para criar terreno
	    painelCriaçãoTerreno = new JPanel();
	    painelCriaçãoTerreno.setLayout(null);
	    painelCriaçãoTerreno.setBackground(painelPrimario.getBackground());

	    // Painel para importar terreno
	    painelImportarTerreno = new JPanel();
	    painelImportarTerreno.setLayout(null);
	    painelImportarTerreno.setBackground(painelPrimario.getBackground());

	    // Painel personalizado com uma imagem de fundo (grama)
	    painelTerrenoExemplo = new CustomPanel("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama + ".jpg");
	    painelTerrenoExemplo.setLayout(new GridBagLayout()); // Utiliza um layout GridBag para flexibilidade na organização dos componentes

	    // Posição inicial dos botões
	    xbtn = (int) (painelPrimario.getWidth() / 2) - 75; // Centraliza os botões horizontalmente
	    ybtn = (int) (painelPrimario.getHeight() / 2 - 130); // Define a posição vertical dos botões

	    setContentPane(painelPrimario); // Define o painel1 como o conteúdo principal da janela

	    listaBotoes = new ArrayList<Botoes>(); // Inicializa a lista de botões

		// Inicializa os botões que serão exibidos no painel principal, definindo cores, bordas e suas posições.
	
	    // Botão "Iniciar Jogo" na posição (xbtn, ybtn) com cores e bordas definidas
		botaoIJ = new Botoes("Iniciar Jogo", cor1, cor2, borda1, borda2, xbtn, ybtn); 
		listaBotoes.add(botaoIJ); // Adiciona o botão à lista de botões
	
		 // Botão "Modos de Jogo" posicionado abaixo do botão "Iniciar Jogo"
		botaoMJ = new Botoes("Modos de Jogo", cor1, cor2, borda1, borda2, xbtn, ybtn + 42); 
		listaBotoes.add(botaoMJ); // Adiciona o botão à lista de botões
	
		// Botão "Instruções" posicionado abaixo do botão "Modos de Jogo"
		botaoIN = new Botoes("Instruções", cor1, cor2, borda1, borda2, xbtn, ybtn + 84); 
		listaBotoes.add(botaoIN); // Adiciona o botão à lista de botões
	
		// Botão "Light Mode" para alternar entre modos claro e escuro, posicionado abaixo do botão "Instruções"
		botaoT = new Botoes("Light Mode", cor1, cor2, borda1, borda2, xbtn, ybtn + 126); 
		listaBotoes.add(botaoT); // Adiciona o botão à lista de botões
	
		// Botões relacionados à manipulação de terrenos (criação e importação), também no painel principal
	
		// Botão "Criar Terreno" para iniciar a criação de um novo terreno, na posição (xbtn, ybtn)
		botaoCT = new Botoes("Criar Terreno", cor1, cor2, borda1, borda2, xbtn, ybtn);
		listaBotoes.add(botaoCT); // Adiciona o botão à lista de botões
	
		// Botão "Importar Terreno" posicionado logo abaixo do botão "Criar Terreno"
		botaoIT = new Botoes("Importar Terreno", cor1, cor2, borda1, borda2, xbtn, ybtn + 42);
		listaBotoes.add(botaoIT); // Adiciona o botão à lista de botões
	
		// Botão "Retornar" para voltar ao menu anterior, posicionado abaixo do botão "Importar Terreno"
		botaoRI = new Botoes("Retornar", cor1, cor2, borda1, borda2, xbtn, ybtn + 84);
		listaBotoes.add(botaoRI); // Adiciona o botão à lista de botões


	    // Rótulo que indica onde as entradas serão exibidas
	    caixaSaidas = new JLabel("Entradas");
	    caixaSaidas.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o texto
	    caixaSaidas.setFont(new Font("Georgia", Font.ITALIC, 14)); // Define a fonte e o estilo do texto
	    caixaSaidas.setForeground(cor2); // Define a cor do texto
	    caixaSaidas.setIcon(null); // Sem ícone associado
	    caixaSaidas.setBounds(xbtn - 190, ybtn - 80, 500, 40); // Define o tamanho e a posição do rótulo

	    // Área de texto onde o usuário pode digitar
	    caixaTexto = new JTextArea();
	    caixaTexto.setBorder(borda1); // Define a borda da área de texto
	    caixaTexto.setFont(caixaSaidas.getFont()); // Usa a mesma fonte do rótulo
	    caixaTexto.setLineWrap(true); // Habilita a quebra de linha automática
	    caixaTexto.setWrapStyleWord(true); // Quebra a linha por palavra

	    // Componente de rolagem para a área de texto
	    scroll = new JScrollPane(caixaTexto);
	    scroll.setBounds(xbtn - 30, ybtn - 50, 180, 90); // Define a posição e o tamanho do componente de rolagem
	    scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS); // Barra de rolagem vertical sempre visível
	    scroll.setBorder(borda1); // Define a borda do componente de rolagem


		
		//Cria um scroll personalizado sem os botões, e com uma coloração diferente
		scroll.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = cor2;   // Cor da parte deslizante (thumb)
                this.trackColor = new Color(240,240,240);  // Cor do trilho (track)
                this.thumbHighlightColor = cor1;  // Cor de destaque do thumb
                this.thumbDarkShadowColor = new Color(30, 100, 200); // Cor da sombra do thumb
                this.trackHighlightColor = new Color(150, 150, 150); // Cor de destaque do trilho
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();  // Remove o botão de diminuir (rolar para cima)
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();  // Remove o botão de aumentar (rolar para baixo)
            }

            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));  // Define o tamanho do botão como 0
                return button;
            }
        });
		
		// Inicializa o botão "Enviar" com suas propriedades e adiciona à lista de botões
		botaoEN = new Botoes("Enviar", cor1, cor2, borda1, borda2, xbtn, ybtn);
		botaoEN.setBounds(xbtn, ybtn + 42, 120, 42); // Define a posição e o tamanho do botão
		listaBotoes.add(botaoEN); // Adiciona o botão à lista de botões

		// Inicializa o botão "Terreno Exemplo" e adiciona à lista de botões
		botaoTE = new Botoes("Terreno Exemplo", cor1, cor2, borda1, borda2, xbtn, ybtn + 86);
		listaBotoes.add(botaoTE);

		// Inicializa o botão "Começar Jogo" e adiciona à lista de botões
		botaoStart = new Botoes("Começar Jogo", cor1, cor2, borda1, borda2, xbtn, ybtn + 128);
		listaBotoes.add(botaoStart);

		// Inicializa o botão "Retornar" e adiciona à lista de botões
		botaoRC = new Botoes("Retornar", cor1, cor2, borda1, borda2, xbtn, ybtn + 170);
		listaBotoes.add(botaoRC);

		// Label que indica as saidas do painel de importar terreno
		caixaSaidas2 = new JLabel("Por favor, selecione um caminho do arquivo txt.");
		caixaSaidas2.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o texto no label
		caixaSaidas2.setFont(new Font("Georgia", Font.ITALIC, 18	)); // Define a fonte
		caixaSaidas2.setForeground(cor2); // Define a cor do texto
		caixaSaidas2.setIcon(null); // Não há ícone associado ao rótulo
		caixaSaidas2.setBounds(xbtn - 190, ybtn - 12, 500, 40); // Define a posição e tamanho do rótulo


		// Inicializa outro botão "Enviar" e adiciona à lista de botões
		botaoC = new Botoes("Caminho", cor1, cor2, borda1, borda2, xbtn, ybtn + 44);
		listaBotoes.add(botaoC);

		// Inicializa o botão "Retornar" com uma posição diferente
		botaoRT = new Botoes("Retornar", cor1, cor2, borda1, borda2, 1366 / 2 - 75, 720 / 2 + 325);
		listaBotoes.add(botaoRT);

		// Inicializa o botão "Salvar Terreno"
		botaoST = new Botoes("Salvar Terreno", cor1, cor2, borda1, borda2, 1366 / 2 - 75, 720 / 2 + 283);
		listaBotoes.add(botaoST);

		// Inicializa o botão "Novo Terreno"
		botaoNT = new Botoes("Novo Terreno", cor1, cor2, borda1, borda2, 1366 / 2 - 75, 100);
		listaBotoes.add(botaoNT);


		// Inicializa uma janela para exibir instruções
		frameIN = new JFrame();
		frameIN.setTitle("Instruções"); // Define o título da janela
		frameIN.setIconImage(imgLogo.getImage()); // Define o ícone da janela
		frameIN.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // Fecha a janela sem finalizar o programa
		frameIN.setSize(800, 500); // Define o tamanho da janela
		frameIN.setLocationRelativeTo(null); // Centraliza a janela na tela
		frameIN.setResizable(false); // Impede o redimensionamento da janela
		frameIN.setVisible(false); // A janela é invisível inicialmente

		
		
		// Botão "Retornar" adicional, posicionado em (xbtn + 100, ybtn + 340)
		botaoRI2 = new Botoes("Retornar", cor1, cor2, borda1, borda2, xbtn + 100, ybtn + 340); 
		listaBotoes.add(botaoRI2); // Adiciona o botão à lista de botões

		
		caixaInstru = new JTextArea(
			    "Regras do Jogo:\n"
			    	    + "1 - Movimentação:\n"
			    	    + "	Cada competidor lança dois dados no início de sua vez para determinar os pontos de movimento disponíveis.\n"
			    	    + "	O competidor pode se mover para células adjacentes (cima, baixo, esquerda, direita) até que os pontos de\n"
			    	    + "	movimento se esgotem.\n"
			    	    + "	Movimentos e interações possíveis:\n"
			    	    + "		Grama: movimentar-se custa 1 ponto.\n"
			    	    + "		Árvore: movimentar-se custa 1 ponto. Permanecer 1 turno sem se mover garante uma fruta,\n"
			    	    + "	com um limite de uma fruta a cada 5 turnos.\n"
			    	    + "		Pedra: não pode ser ocupada, mas pode ser pulada ao custo de 3 pontos.\n"
			    	    + "		Frutas: coletar uma fruta custa 1 ponto (a mesma de andar na grama), e ela é colocada na mochila\n"
			    	    + "	do competidor.\n"
			    	    + "	A movimentação termina quando todos os pontos são usados ou o jogador decide finalizar seu turno.\n"
			    	    + "\n"
			    	    + "2 - Interação com Frutas:\n"
			    	    + "	Ao entrar em uma célula com uma fruta, o competidor pode coletá-la e colocá-la na sua mochila.\n"
			    	    + "	Frutas podem ser usadas para fortalecer o competidor ou para efeitos especiais\n"
			    	    + "	(como aumento de força ou agilidade).\n"
			    	    + "	Frutas \"bichadas\" impedem o competidor de se mover no próximo turno, a menos que ele coma uma laranja.\n"
			    	    + "\n"
			    	    + "3 - Conflitos entre Competidores:\n"
			    	    + "	Quando dois competidores tentam entrar em células adjacentes, ocorre um empurrão. O competidor da vez\n"
			    	    + "	empurra o adversário, derrubando frutas da mochila do outro competidor.\n"
			    	    + "	A quantidade de frutas derrubadas é calculada usando a força do ataque e da defesa de cada competidor:\n"
			    	    + "		Força de Ataque (fa) = quantidade de frutas no atacante.\n"
			    	    + "		Força de Defesa (fd) = quantidade de frutas no defensor.\n"
			    	    + "	O número de frutas derrubadas é calculado como:\n"
			    	    + "		empurrão = round(log2(fa + 1)) - round(log2(fd + 1))\n"
			    	    + "	O defensor perde um número de frutas igual ao valor do empurrão (ou todas as frutas se tiver menos que o valor).\n"
			    	    + "\n"
			    	    + "4 - Mochila e Limite de Frutas:\n"
			    	    + "	Cada competidor tem uma mochila com uma capacidade limitada de frutas. Quando a mochila atinge o limite,\n"
			    	    + "	o competidor deve consumir ou perder frutas antes de coletar mais.\n"
			    	    + "	A força do competidor aumenta conforme ele coleta frutas, tornando-o mais forte em confrontos.\n"
			    	    + "\n"
			    	    + "5 - Condicional de Vitória:\n"
			    	    + "	O jogo termina quando um dos competidores acumula mais da metade dos maracujás (frutas ouro)\n"
			    	    + "	em sua mochila.\n"
			    	    + "	A verificação de vitória é feita no início de cada turno. O competidor que atingir o número necessário de maracujás\n"
			    	    + "	vence na rodada seguinte.\n"
			    	    + "6 - Controles:\n"
			    	    + "	6.1 - Movimento:"
			    	    + "		Via teclado: use as setas direcionais para mover o competidor.\n"
			    	    + "		Via mouse: clique na célula adjacente desejada para mover o competidor.\n"
			    	    + "	6.2 - Ações:"
			    	    + "		Coletar frutas: o competidor coleta automaticamente ao entrar na célula com a fruta.\n"
			    	    + "		Consumir frutas: pode ser feito a qualquer momento durante o turno,\n"
			    	    + "		selecionando uma fruta na mochila.\n"
			    	    + "		Finalizar turno: pressione o botão de \"Concluir Jogada\" para passar a vez ao outro competidor.\n"
			    	);
		
		// Configurações da área de texto para exibição de instruções
		caixaInstru.setLineWrap(false);  // Desabilita a quebra automática de linha
		caixaInstru.setWrapStyleWord(true);  // Quebra de linha respeitando palavras inteiras
		caixaInstru.setFont(new Font("Georgia", Font.ITALIC, 12));  // Define a fonte do texto
		caixaInstru.setForeground(cor2);  // Define a cor do texto
		caixaInstru.setBackground(painelInstrução.getBackground());  // Usa a mesma cor de fundo do painel
		caixaInstru.setEditable(false);  // Impede que o texto seja editável
		caixaInstru.setOpaque(false);  // Torna o fundo transparente

		// Configura o JScrollPane para exibir a área de texto
		scrollInstrucoes = new JScrollPane(caixaInstru);
		scrollInstrucoes.setBounds(16, 30, 750, 360);  // Define as dimensões e posição do JScrollPane
		scrollInstrucoes.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);  // Adiciona uma barra de rolagem vertical
		scrollInstrucoes.setBorder(borda1);  // Define a borda do JScrollPane
		scrollInstrucoes.setOpaque(false);  // Torna o JScrollPane transparente
		scrollInstrucoes.getViewport().setOpaque(false);  // Torna a área visível transparente

		// Personaliza a aparência da barra de rolagem usando BasicScrollBarUI
		scrollInstrucoes.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
		    @Override
		    protected void configureScrollBarColors() {
		        this.thumbColor = cor2;  // Define a cor da parte deslizante (thumb)
		        this.trackColor = new Color(240, 240, 240);  // Define a cor do trilho (track)
		        this.thumbHighlightColor = cor1;  // Define a cor de destaque do thumb
		        this.thumbDarkShadowColor = new Color(30, 100, 200);  // Define a cor da sombra do thumb
		        this.trackHighlightColor = new Color(150, 150, 150);  // Define a cor de destaque do trilho
		    }

		    // Remove os botões de rolagem para cima e para baixo
		    @Override
		    protected JButton createDecreaseButton(int orientation) {
		        return createZeroButton();  // Remove o botão de diminuir
		    }

		    @Override
		    protected JButton createIncreaseButton(int orientation) {
		        return createZeroButton();  // Remove o botão de aumentar
		    }

		    // Método auxiliar para criar um botão invisível
		    private JButton createZeroButton() {
		        JButton button = new JButton();
		        button.setPreferredSize(new Dimension(0, 0));  // Define o tamanho do botão como 0
		        return button;
		    }
		});

		// Adiciona o JScrollPane e o botão "Retornar" ao painel
		frameIN.add(painelInstrução);
		painelInstrução.add(scrollInstrucoes);
		painelInstrução.add(botaoRI2);


		caixaNoticias = new JLabel("<html></html>");
		caixaNoticias.setHorizontalAlignment(SwingConstants.CENTER); // Centraliza o texto no label
		caixaNoticias.setForeground(new Color(255,255,255)); // Define a cor do texto
		caixaNoticias.setIcon(null); // Não há ícone associado ao rótulo
		caixaNoticias.setBounds(15,100,500,300);
		caixaNoticias.setBackground(cor1);
		
		scrollNoticias = new JScrollPane();
		scrollNoticias.setBounds(15, 100, 500, 300);  // Define as dimensões e posição do JScrollPane
		scrollNoticias.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);  // Adiciona uma barra de rolagem vertical
		scrollNoticias.setBorder(borda1);  // Define a borda do JScrollPane
		scrollNoticias.setBackground(cor1);
		
		
		painelJogo = new CustomPanel("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama + ".jpg");
	    painelJogo.setLayout(new GridBagLayout()); // Utiliza um layout GridBag para flexibilidade na organização dos componentes

		
		painelInicio();
		
		
		// Adiciona a ação do botão "Iniciar Jogo"
		botaoIJ.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoIJ);  // Marca o botão como clicado
		        painelIniciarJogo();  // Troca para o painel de iniciar o jogo
		    }
		});

		// Adiciona a ação do botão "Criar Terreno"
		botaoCT.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoCT);  // Marca o botão como clicado
		        painelCriacaoTerreno();  // Troca para o painel de criação de terreno
		    }
		});

		// Adiciona a ação do botão "Importar Terreno"
		botaoIT.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoIT);  // Marca o botão como clicado
		        painelImportarTerreno();  // Troca para o painel de importação de terreno
		    }
		});

		// Adiciona a ação do botão "Retornar" (botaoRI) para voltar ao menu inicial
		botaoRI.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoRI);  // Marca o botão como clicado
		        painelInicio();  // Volta para o painel inicial
		    }
		});

		// Adiciona a ação do botão "Retornar" (botaoRC) para voltar ao jogo
		botaoRC.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoRC);  // Marca o botão como clicado
		        painelIniciarJogo();  // Troca para o painel de início de jogo
		    }
		});

		// Alterna entre Light Mode e Dark Mode quando o botão correspondente é clicado
		botaoT.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        if (botaoT.getText().equals("Light Mode")) {
		            botaoT.mode(listaBotoes);  // Aplica o modo claro aos botões
		            botaoT.setText("Dark Mode");  // Muda o texto para "Dark Mode"
		        } else {
		            botaoT.mode(listaBotoes);  // Aplica o modo escuro aos botões
		            botaoT.setText("Light Mode");  // Muda o texto para "Light Mode"
		        }
		        revalidate();  // Atualiza o layout
		        repaint();  // Redesenha o painel
		    }
		});



		// Ação para o botão "Enviar"(Criação Terreno)
		botaoEN.addActionListener(new ActionListener() {
		    @Override
		    public void actionPerformed(ActionEvent e) {
		        uiaceita = false;
		        
		        // Captura o texto inserido
		        userInput = caixaTexto.getText();
		        
		        // Verifica se a entrada é vazia
		        if (userInput.isEmpty() || userInput.isBlank()) {
		            caixaSaidas.setText("Erro: A entrada não pode ser vazia.");
		            return;
		        }
		        
		        String[] linhas = userInput.split("\n"); // Divide o texto em linhas
		        
		        // Processar as linhas
		        for (int j = 0; j < linhas.length; j++) {
		            String linha = linhas[j].trim(); // Remove espaços extras
		            String[] partes = linha.split(" ");

		            // Validação do formato das linhas (primeiras e últimas linhas têm no máximo 2 partes)
		            if (((j <= 1) || (j >= 9)) && partes.length > 2) {
		                caixaSaidas.setText("Erro: formato da linha " + (j + 1) + " inválido.");
		                return;
		            } else if (partes.length == 2) {  // Para linhas com 2 partes (dimensões e pedras)
		                memoriaEN[j][0] = partes[0];
		                memoriaEN[j][1] = partes[1];
		                memoriaEN[j][2] = ""; // Deixa o terceiro campo vazio
		            } else if (partes.length == 3) {  // Para linhas com 3 partes (frutas)
		                memoriaEN[j][0] = partes[0];  // Nome da fruta
		                memoriaEN[j][1] = partes[1];  // Quantidade de árvores
		                memoriaEN[j][2] = partes[2];  // Quantidade de frutas    
		            } else {
		                caixaSaidas.setText("Erro: formato da linha " + (j + 1) + " inválido.");
		                return; // Sai da função se houver erro no formato da linha
		            }
		        }
		        
		        terreno = new Terreno(memoriaEN);
		        // Verifica o terreno após processar as entradas
		        boolean resultado = terreno.verificaTerreno();
		        if (resultado) {
		            caixaSaidas.setText("Entradas aceitas.");
		        }
		    }
		});

		

		// Ação para o botão "Enviar"(Importar Terreno)
		botaoC.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoC);  // Marca o botão como clicado
		        abrirCaminho();
		    }
		});

		
		
		
		// Ação para o botão "Terreno Exemplo"
		botaoTE.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoTE);  // Marca o botão como clicado
		        if (terreno.verificaTerreno()) {  // Verifica se o terreno está configurado corretamente
		            setExtendedState(MAXIMIZED_BOTH);  // Maximiza a janela
		            painelTerrenoExemplo();  // Exibe o painel do terreno de exemplo
		            terreno.criaTerrenoSistema();  // Configura o sistema de terreno exemplo
		            painel = 1; // Define a criação do terreno no painel de terreno exemplo
		            criacaoVisualTerrenoJogo();  // Chama o método para criar o terreno
		        }
		    }
		});

		// Ação para o botão "Salvar Terreno"
		botaoST.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoST);  // Marca o botão como clicado
		        try {
					terreno.exportarEntradas();
				} catch (IOException | InterruptedException e1) {
					e1.printStackTrace();
				}
		    }
		});

		// Ação para o botão "Retornar" no menu
		botaoRT.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoRT);  // Marca o botão como clicado
		        setSize(600, 400);  // Define o tamanho da janela
		        setLocationRelativeTo(null);  // Centraliza a janela
		        setResizable(false);  // Impede o redimensionamento
		        painelIniciarJogo();  // Retorna ao painel inicial do jogo
		    }
		});

		// Ação para o botão "Novo Terreno"
		botaoNT.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoNT);  // Marca o botão como clicado
		        terreno.criaTerrenoSistema();  // Configura o terreno exemplo
		        painel = 1; // Define a criação do terreno no painel de terreno exemplo
		        criacaoVisualTerrenoJogo();  // Chama o método de criação de terreno
		    }
		});

		// Ação para o botão "Instruções"
		botaoIN.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoIN);  // Marca o botão como clicado
		        painelInstrucoes();  // Exibe o painel de instruções
		    }
		});

		// Ação para o botão "Retornar" nas instruções (botaoRI2)
		botaoRI2.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoRI2);  // Marca o botão como clicado
		        frameIN.setVisible(false);  // Esconde a janela de instruções
		        revalidate();  // Revalida a janela para atualizar a interface
		        repaint();  // Redesenha a janela
		    }
		});
		
		botaoStart.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoStart);
		        abrirCaminho();
		    	if(terreno.floresta != null) {
			        setExtendedState(MAXIMIZED_BOTH);
			        painelJogo();
			        painel = 0; //Define a criação do tereno no painel de jogo
			        criacaoVisualTerrenoJogo();
		    	}
		    	else {
		    		terreno.criaTerrenoSistema();
		    		setExtendedState(MAXIMIZED_BOTH);
			        painelJogo();
			        terreno.criaTerrenoSistema();
			        painel = 0; //Define a criação do tereno no painel de jogo
			        criacaoVisualTerrenoJogo();
		    	}
	            configurarKeyListener();
		    }
		});
	}
	
	public void botaoClickado(Botoes botao) {
	    botao.setBackground(botaoT.getBackground());  // Define o fundo do botão clicado com o fundo de botaoM
	    botao.setForeground(botaoT.getForeground());  // Define a cor do texto do botão clicado com a de botaoM
	    botao.setBorder(botaoT.getBorder());  // Define a borda do botão clicado com a borda de botaoM
	    revalidate();  // Revalida o layout para refletir as mudanças
	    repaint();  // Redesenha a interface para garantir que as mudanças sejam exibidas
	}

	public void painelInicio() {
	    painelInicial.add(botaoIJ);  // Adiciona o botão "Iniciar Jogo"
	    painelInicial.add(botaoMJ);  // Adiciona o botão "Modos de Jogo"
	    painelInicial.add(botaoIN);   // Adiciona o botão "Instruções"
	    painelInicial.add(botaoT);    // Adiciona o botão de alternar entre modos de tema
	    painelPrimario.removeAll();      // Remove todos os componentes do painel principal
	    painelPrimario.add(logo, BorderLayout.NORTH);  // Adiciona o logo ao topo do painel
	    painelPrimario.add(painelInicial);   // Adiciona o painel inicial ao centro
	    revalidate();             // Revalida o layout
	    repaint();                // Redesenha o painel
	}

	public void painelIniciarJogo() {
	    painelIniciarJogo.add(botaoCT);   // Adiciona o botão "Criar Terreno"
	    painelIniciarJogo.add(botaoIT);   // Adiciona o botão "Importar Terreno"
	    painelIniciarJogo.add(botaoRI);   // Adiciona o botão "Retornar"
	    painelPrimario.removeAll();      // Remove todos os componentes do painel principal
	    painelPrimario.add(logo, BorderLayout.NORTH);  // Adiciona o logo ao topo do painel
	    painelPrimario.add(painelIniciarJogo, BorderLayout.CENTER);  // Adiciona o painel do jogo ao centro
	    revalidate();             // Revalida o layout
	    repaint();                // Redesenha o painel
	}

	public void painelInstrucoes() {
	    frameIN.setVisible(true);  // Exibe a janela de instruções
	    revalidate();              // Revalida o layout
	    repaint();                 // Redesenha a interface
	}

	public void painelCriacaoTerreno() {
	    painelCriaçãoTerreno.add(caixaSaidas);  // Adiciona a caixa de saídas ao painel de criação de terreno
	    painelCriaçãoTerreno.add(scroll);        // Adiciona a barra de rolagem ao painel de criação de terreno
	    painelCriaçãoTerreno.add(botaoEN);      // Adiciona o botão "Enviar" ao painel de criação de terreno
	    painelCriaçãoTerreno.add(botaoTE);      // Adiciona o botão "Terreno Exemplo" ao painel de criação de terreno
	    painelCriaçãoTerreno.add(botaoStart);   // Adiciona o botão "Start" ao painel de criação de terreno
	    painelCriaçãoTerreno.add(botaoRC);      // Adiciona o botão "Retornar" ao painel de criação de terreno
	    painelPrimario.removeAll();        // Remove todos os componentes do painel principal
	    painelPrimario.add(logo, BorderLayout.NORTH);  // Adiciona o logo ao topo do painel
	    painelPrimario.add(painelCriaçãoTerreno, BorderLayout.CENTER);  // Adiciona o painel de criação de terreno ao centro
	    revalidate();               // Revalida o layout
	    repaint();                  // Redesenha o painel
	}

	
	public void painelImportarTerreno() {
	    painelImportarTerreno.add(caixaSaidas2);	  // Adiciona a caixa de saidas2
		painelImportarTerreno.add(botaoC);         // Adiciona o botão "Caminho" ao painel de importação
	    painelImportarTerreno.add(botaoTE);        // Adiciona o botão "Terreno Exemplo" ao painel de importação
	    painelImportarTerreno.add(botaoStart);     // Adiciona o botão "Start" ao painel de importação
	    painelImportarTerreno.add(botaoRC);        // Adiciona o botão "Retornar" ao painel de importação
	    painelPrimario.removeAll();          // Remove todos os componentes do painel principal
	    painelPrimario.add(logo, BorderLayout.NORTH);  // Adiciona o logo ao topo do painel
	    painelPrimario.add(painelImportarTerreno, BorderLayout.CENTER);  // Adiciona o painel de importação ao centro
	    revalidate();                 // Revalida o layout
	    repaint();                    // Redesenha o painel
	}

	
	public void painelTerrenoExemplo() {
	    painelPrimario.removeAll(); // Remove todos os componentes do painel principal
	    painelPrimario.add(botaoRT); // Adiciona o botão "Retornar"
	    painelPrimario.add(botaoST); // Adiciona o botão "Salvar Terreno"
	    painelPrimario.add(botaoNT); // Adiciona o botão "Novo Terreno"
	    painelPrimario.add(logo, BorderLayout.NORTH);  // Adiciona o logo ao topo do painel
	    gbc = new GridBagConstraints();  // Cria um novo GridBagConstraints
	    gbc.weightx = 0;                 
	    gbc.weighty = 0;
	    gbc.insets = new Insets(0, 0, 0, 0); // Define as margens do GridBagConstraints
	    gbc.anchor = GridBagConstraints.CENTER; // Centraliza o painel
	    painelTerrenoExemplo.setBounds(1366/2, 720/2 , 300, 300); // Define as dimensões do painel
	    painelTerrenoExemplo.setBackground(cor1); // Define a cor de fundo do painel
	    painelTerrenoExemplo.setBorder(borda1); // Define a borda do painel
	    painelPrimario.add(painelTerrenoExemplo, BorderLayout.CENTER); // Adiciona o painel de terreno ao centro do painel principal
	    revalidate(); // Revalida o layout
	    repaint(); // Redesenha o painel
	}
	
	
	public void painelJogo() {
		painelPrimario.removeAll();      // Remove todos os componentes do painel principal
	    painelPrimario.add(caixaNoticias);
		gbc = new GridBagConstraints();  // Cria um novo GridBagConstraints
	    gbc.weightx = 0;                 
	    gbc.weighty = 0;
	    gbc.insets = new Insets(0, 0, 0, 0); // Define as margens do GridBagConstraints
	    gbc.anchor = GridBagConstraints.CENTER; // Centraliza o painel
	    painelPrimario.add(painelJogo, BorderLayout.CENTER);
		revalidate();             // Revalida o layout
	    repaint();  
	}
	
	
	// Função utilizada para criar uma imagem dentro da escala do tamanho do botão
	public ImageIcon criandoImagem(int tamanho, ImageIcon img) {
		ImageIcon imagem = img;
	    Image img1 = imagem.getImage().getScaledInstance(tamanho, tamanho, Image.SCALE_SMOOTH);
	    imagem = new ImageIcon(img1);
	    return imagem;
	}
	
	
	// Criando o terreno dentro do painel
		public void criacaoVisualTerrenoJogo() {
			int tamanhoCelula = 480 / terreno.Dimensao;
			if(painel == 0) {
				painelJogo.setLayout(new GridBagLayout());  // Mantém o layout
			    painelJogo.removeAll();  // Limpa o painel antes de recriar as células
			}
			else {
				painelTerrenoExemplo.setLayout(new GridBagLayout());  // Mantém o layout
			    painelTerrenoExemplo.removeAll();  // Limpa o painel antes de recriar as células
			}
		    
		    ImageIcon imgjogador1 = criandoImagem(tamanhoCelula, imgPjogador1);
		    ImageIcon imgjogador2 = criandoImagem(tamanhoCelula, imgPjogador2);
		    ImageIcon imgArvoreAbacate = criandoImagem(tamanhoCelula, imgPArvoreAbacate);
		    ImageIcon imgArvoreAmora = criandoImagem(tamanhoCelula, imgPArvoreAmora);
		    ImageIcon imgArvoreLaranja = criandoImagem(tamanhoCelula, imgPArvoreLaranja);
		    ImageIcon imgArvoreAcerola= criandoImagem(tamanhoCelula, imgPArvoreAcerola);
		    ImageIcon imgArvoreGoiaba= criandoImagem(tamanhoCelula, imgPArvoreGoiaba);
		    ImageIcon imgArvoreCoco = criandoImagem(tamanhoCelula, imgPArvoreCoco);
		    ImageIcon imgFrutaMaracuja = criandoImagem(tamanhoCelula, imgPFrutaMaracuja);
		    ImageIcon imgFrutaLaranja = criandoImagem(tamanhoCelula, imgPFrutaLaranja); 
		    ImageIcon imgFrutaAbacate = criandoImagem(tamanhoCelula, imgPFrutaAbacate);
		    ImageIcon imgFrutaGoiaba = criandoImagem(tamanhoCelula, imgPFrutaGoiaba);
		    ImageIcon imgFrutaAmora = criandoImagem(tamanhoCelula, imgPFrutaAmora);
		    ImageIcon imgFrutaCoco = criandoImagem(tamanhoCelula, imgPFrutaCoco);
		    ImageIcon imgFrutaAcerola = criandoImagem(tamanhoCelula, imgPFrutaAcerola);
		    ImageIcon imggrama = criandoImagem(tamanhoCelula, imgPgrama);
		    ImageIcon imgPedra= criandoImagem(tamanhoCelula, imgPPedra);
		    
		    celulas = new JLabel[terreno.Dimensao][terreno.Dimensao];
		    
		    // Criação das imagens dentro de cada botão, de acordo com as posições da Matriz
		    for (int i = 0; i < terreno.Dimensao; i++) {
		        for (int j = 0; j < terreno.Dimensao; j++) {
		    	    JLabel celula = new JLabel();
		    	    celulas[i][j] = celula;
		    	    celula.setBorder(borda1);
		            celula.setBackground(null);
		            celula.setOpaque(false);	            
		            
		            if(terreno.floresta[i][j] instanceof Jogador) {
		            	Jogador jogador = (Jogador) terreno.floresta[i][j];
	            		if(jogador.id == 1) {
		            		celula.setIcon(imgjogador1);
		            		jogadores[0] = (Jogador) terreno.floresta[i][j];
	            		}
	            		else if(jogador.id == 2) {
	            			celula.setIcon(imgjogador2);
	            			jogadores[1] = (Jogador) terreno.floresta[i][j];
	            		}
		            }
		            else if(terreno.floresta[i][j] instanceof Pedra) {
		            	celula.setIcon(imgPedra);
		            }
		            else if(terreno.floresta[i][j] instanceof Arvore) {
		            	if(terreno.floresta[i][j] instanceof Arvore_Laranja) {
		            		celula.setIcon(imgArvoreLaranja);
		            	}
		            	if(terreno.floresta[i][j] instanceof Arvore_Abacate) {
		            		celula.setIcon(imgArvoreAbacate);
		            	}
		            	if(terreno.floresta[i][j] instanceof Arvore_Coco) {
		            		celula.setIcon(imgArvoreCoco);
		            	}
		            	if(terreno.floresta[i][j] instanceof Arvore_Acerola) {
		            		celula.setIcon(imgArvoreAcerola);
		            	}
		            	if(terreno.floresta[i][j] instanceof Arvore_Amora) {
		            		celula.setIcon(imgArvoreAmora);
		            	}
		            	if(terreno.floresta[i][j] instanceof Arvore_Goiaba) {
		            		celula.setIcon(imgArvoreGoiaba);
		            	}
		            }
		            else if(terreno.floresta[i][j] instanceof Fruta) {
		            	if(terreno.floresta[i][j] instanceof Maracuja) {
		            		celula.setIcon(imgFrutaMaracuja);
		            	}
		            	if(terreno.floresta[i][j] instanceof Laranja) {
		            		celula.setIcon(imgFrutaLaranja);
		            	}
		            	if(terreno.floresta[i][j] instanceof Abacate) {
		            		celula.setIcon(imgFrutaAbacate);
		            	}
		            	if(terreno.floresta[i][j] instanceof Coco) {
		            		celula.setIcon(imgFrutaCoco);
		            	}
		            	if(terreno.floresta[i][j] instanceof Acerola) {
		            		celula.setIcon(imgFrutaAcerola);
		            	}
		            	if(terreno.floresta[i][j] instanceof Amora) {
		            		celula.setIcon(imgFrutaAmora);
		            	}
		            	if(terreno.floresta[i][j] instanceof Goiaba) {
		            		celula.setIcon(imgFrutaGoiaba);
		            	}
		            }
		            else{
		            	celula.setIcon(imggrama);
		            }
		            celula.setPreferredSize(new Dimension(tamanhoCelula, tamanhoCelula));

		            gbc.gridx = j;
		            gbc.gridy = i;
		            
		            if(painel == 0) {
		            	painelJogo.add(celula, gbc);
		            }
		            else {
		            	painelTerrenoExemplo.add(celula,gbc);
		            }
		        }
		    }
		    revalidate();
		    repaint();
		}

	
	
	
	
	
	// Função para configurar o KeyListener apenas uma vez
	public void configurarKeyListener() {
	    painelJogo.setFocusable(true);
	    painelJogo.requestFocusInWindow(); // Garante que o painel receba o foco
	    if(botoesAtivados == 0) {
    		Jogador jogadorDaVez = jogadores[contadorTurno % 2];
    	    jogadorDaVez.setMovimentos();
	    	painelJogo.addKeyListener(new KeyAdapter() {
		        @Override
		        public void keyPressed(KeyEvent e) {
		            switch (e.getKeyCode()) {
		                case KeyEvent.VK_UP:
		                    System.out.println("Movimentando para cima.");
		                    terreno.floresta = jogadorDaVez.movimentar(1, terreno);
		                    break;
		                case KeyEvent.VK_DOWN:
		                    System.out.println("Movimentando para baixo.");
		                    terreno.floresta = jogadorDaVez.movimentar(2, terreno);
		                    break;
		                case KeyEvent.VK_RIGHT:
		                    System.out.println("Movimentando para direita.");
		                    terreno.floresta = jogadorDaVez.movimentar(3, terreno);
		                    break;
		                case KeyEvent.VK_LEFT:
		                    System.out.println("Movimentando para esquerda.");
		                    terreno.floresta = jogadorDaVez.movimentar(4, terreno);
		                    break;
		                case KeyEvent.VK_E:
		                    System.out.println("Realizando salto.");
		                	terreno.floresta = jogadorDaVez.saltar(terreno.floresta,1);
		                case KeyEvent.VK_F:
		                	jogadorDaVez.encerrarTurno();
		                	break;
		                case KeyEvent.VK_C:
		                	jogadorDaVez.mochilaJogador.exibirMochila();
		                	break;
		                case KeyEvent.VK_1:
		                	jogadorDaVez.comerFrutas(1);
		                	break;
		                default:
		                    return; // Ignora outras teclas
		            }
		            botoesAtivados = 1;
		            criacaoVisualTerrenoJogo(); // Atualiza o terreno após o movimento
		        }
		    });
	    }
	}
		
	// Classe para possibilitar a criação de um painel com uma imagem como o plano de fundo
	public class CustomPanel extends JPanel {
	    /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Image backgroundImage;

	    // Construtor que carrega a imagem de fundo
	    public CustomPanel(String imagePath) {
	        backgroundImage = new ImageIcon(imagePath).getImage();
	    }

	    @Override
	    protected void paintComponent(Graphics g) {
	        super.paintComponent(g);
	        // Desenha a imagem de fundo cobrindo todo o painel
	        g.drawImage(backgroundImage, 0, 0, 1366, 766, this);
	    }
	    
	    public void updateImagem(String imagePath) {
	    	this.backgroundImage = new ImageIcon(imagePath).getImage();
	    }
	}
	
	
	public void ConsoleParaJLabel() {
        consoleBuffer = new StringBuilder(); // Armazena o texto do console

        // Configuração do JLabel para mostrar o texto
        caixaNoticias = new JLabel("<html></html>");
        caixaNoticias.setVerticalAlignment(SwingConstants.LEFT);  // Alinhamento no topo
        scrollNoticias.setBackground(cor2);
        scrollNoticias.setBounds(15, 100, 500, 300);
        // Configuração da janela
        setLayout(new BorderLayout());
        add(scrollNoticias, BorderLayout.EAST);
        setBounds(15, 100, 500, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBackground(cor2);
        
        // Redirecionando a saída do console para o JLabel
        redirecionarSaidaConsole();

        setVisible(true);
    }
	
	private void redirecionarSaidaConsole() {
		consoleBuffer = new StringBuilder();
        // OutputStream personalizado que envia dados para o JLabel
        OutputStream outputStream = new OutputStream() {
            @Override
            public void write(int b) {
                // Adiciona o caractere ao buffer
                consoleBuffer.append((char) b);
                atualizarLabel();
            }

            @Override
            public void write(byte[] b, int off, int len) {
                // Adiciona uma string ao buffer
                consoleBuffer.append(new String(b, off, len));
                atualizarLabel();
            }
        };

        // Substituindo System.out e System.err pelo nosso OutputStream
        PrintStream printStream = new PrintStream(outputStream, true);
        System.setOut(printStream);
        System.setErr(printStream);
    }

    private void atualizarLabel() {
        // Atualiza o JLabel com o texto acumulado
        caixaNoticias.setText("<html>" + consoleBuffer.toString().replaceAll("\n", "<br>") + "</html>");
    }

    public void abrirCaminho() {

	     // Abre o JFileChooser para o usuário selecionar o arquivo
	        JFileChooser fileChooser = new JFileChooser();
	        fileChooser.setDialogTitle("Selecione o arquivo de terreno");

	        // Configura o JFileChooser para abrir um arquivo
	        int userSelection = fileChooser.showOpenDialog(null);

	        // Verifica se o usuário selecionou um arquivo
	        if (userSelection == JFileChooser.APPROVE_OPTION) {
	            File arquivoTerreno = fileChooser.getSelectedFile();
	            System.out.println("Arquivo selecionado: " + arquivoTerreno.getAbsolutePath());

	            // Verifica se o arquivo existe
	            if (!arquivoTerreno.exists()) {
	                caixaSaidas2.setText("Path inválido. Tente novamente.");
	                return;
	            }

	            final int MAX_LINES = 11;  // Número máximo de linhas esperadas
	            String[] linhas = new String[MAX_LINES];

	            // Tenta ler o arquivo
	            try (BufferedReader BFR = new BufferedReader(new FileReader(arquivoTerreno))) {
	                for (int i = 0; i < MAX_LINES; i++) {
	                    linhas[i] = BFR.readLine();
	                    if (linhas[i] == null) break;  // Para se o arquivo tiver menos linhas que o esperado
	                }

	                // Processa cada linha lida
	                for (int j = 0; j < linhas.length; j++) {
	                    if (linhas[j] == null) break;  // Para se a linha for nula
	                    String linha = linhas[j].trim();  // Remove espaços extras
	                    String[] partes = linha.split(" ");

	                    // Validação do formato das linhas (primeiras e últimas linhas têm no máximo 2 partes)
	                    if ((j <= 1 || j >= 9) && partes.length > 2) {
	                        caixaSaidas2.setText("Erro: formato da linha " + (j + 1) + " inválido.");
	                        return;
	                    } else if (partes.length == 2) {  // Para linhas com 2 partes (dimensões e pedras)
	                        memoriaEN[j][0] = partes[0];
	                        memoriaEN[j][1] = partes[1];
	                        memoriaEN[j][2] = ""; // Deixa o terceiro campo vazio
	                    } else if (partes.length == 3) {  // Para linhas com 3 partes (frutas)
	                        memoriaEN[j][0] = partes[0];  // Nome da fruta
	                        memoriaEN[j][1] = partes[1];  // Quantidade de árvores
	                        memoriaEN[j][2] = partes[2];  // Quantidade de frutas
	                    } else {
	                    	caixaSaidas2.setText("Erro: formato da linha " + (j + 1) + " inválido.");
	                        return; // Sai da função se houver erro no formato da linha
	                    }
	                }
	                terreno = new Terreno(memoriaEN);
	                // Verifica o terreno após processar as entradas
	                if (terreno.verificaTerreno()) {
	                    caixaSaidas2.setText("Caminho aceito.");
	                    System.out.println();
	                    terreno.criaTerrenoSistema();
	                }

	            } catch (IOException e1) {
	            	caixaSaidas2.setText("Erro ao ler o arquivo: " + e1.getMessage());
	            }
	        } else {
	            caixaSaidas2.setText("Operação de seleção de arquivo cancelada pelo usuário.");
	          }
	    
    }
    
}
