package cata_frutas.Elementos.Elementos_Estáticos;

import cata_frutas.Terreno;
import cata_frutas.Elementos.Elemento;
import cata_frutas.Elementos.Elementos_Dinâmicos.Fruta;
import cata_frutas.Elementos.Elementos_Dinâmicos.Jogador;
import cata_frutas.Elementos.Elementos_Dinâmicos.Maracuja;

public abstract class Arvore extends Elemento_Estatico {
    private Fruta tipoFruta;
    private int ultimaFruta;
    private Jogador jogador;

    public Arvore(int x, int y, Fruta fruta) {
        super(x, y);
        this.tipoFruta = fruta;
        this.ultimaFruta = 5;
    }

    public Fruta getFruta() {
        return this.tipoFruta;
    }

    public Elemento[][][] soltarFruta(Elemento[][][] matrizFinal) {
        if (this.jogador == null ||  this.ultimaFruta < 5) {
            return matrizFinal;
        }
        if(!this.jogador.mochilaJogador.mochilaCheia()) {
            for (int i = 0; i < this.jogador.mochilaJogador.mochila.length; i++) {
                if (this.jogador.mochilaJogador.mochila[i] == null) {
                    this.jogador.mochilaJogador.mochila[i] = this.tipoFruta;
                    System.out.printf("A fruta %s caiu na mochila do jogador %s.\n",tipoFruta.nome, this.jogador.nome);
                    this.ultimaFruta = 0;
                    return matrizFinal;
                }
            }
        }
        
        System.out.printf("A mochila do Jogador %s está cheia!\n", this.jogador.nome);

        // Tenta colocar a fruta no chão em uma posição aleatória de grama
        for (int tentativas = 0; tentativas < 10; tentativas++) {
            int x = aleatorio(matrizFinal[0].length);
            int y = aleatorio(matrizFinal[0][0].length);
            if (matrizFinal[0][0][y] instanceof Grama) {
            	matrizFinal[0][x][y] = this.tipoFruta;
                System.out.printf("A fruta %s caiu no chão.\n",tipoFruta.nome);
                return matrizFinal;
            }
        }

        return matrizFinal;
    }

    public Elemento[][][] soltarMaracuja(Terreno terreno) {
        if ((terreno.numeroRodada) % 2 != 0 || terreno.pontosVitoria == terreno.maracujasEmCampo){
             return terreno.matrizFinal;
        }

        for (int tentativa = 0; tentativa < 10; tentativa++) {
            int sorte = aleatorio(terreno.listaArvores.size());
            int x = terreno.listaArvores.get(sorte).getPosicao().getX();
            int y = terreno.listaArvores.get(sorte).getPosicao().getY();

            int deslocamentoX = aleatorio(3) - 1; // -1, 0 ou 1
            int deslocamentoY = aleatorio(3) - 1; // -1, 0 ou 1

            int novoX = x + deslocamentoX;
            int novoY = y + deslocamentoY;
            
            if (verificaPosicao(novoX, novoY, terreno.Dimensao) && terreno.matrizFinal[0][novoX][novoY] instanceof Grama && ((Grama) terreno.matrizFinal[0][novoX][novoY]).getFruta() == null) {
                Grama grama = new Grama(novoX,novoY);
                grama.setFruta(new Maracuja(novoX, novoY, terreno.Bichada));
            	terreno.floresta[novoX][novoY] = grama;
                terreno.maracujasEmCampo++;
                System.out.println("Um maracujá foi solto!");
                return terreno.matrizFinal;
            }
        }

        return terreno.matrizFinal;
    }

    public void atualizarArvore() {
        if (this.ultimaFruta < 5) {
            this.ultimaFruta++;
        }
    }

    public void setJogador(Jogador jogador) {
        this.jogador = jogador;
    }

    public Jogador getJogador() {
        return this.jogador;
    }

    public boolean verificaPosicao(int x, int y, int dimensao) {
        return x >= 0 && x < dimensao && y >= 0 && y < dimensao;
    }

    private int aleatorio(int limite) {
        return (int) (Math.random() * limite);
    }
}
