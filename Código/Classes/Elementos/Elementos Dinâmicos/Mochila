package cata_frutas.Elementos.Elementos_Dinâmicos;

import cata_frutas.Terreno;
import cata_frutas.Elementos.*;
import java.util.HashMap;
import java.util.Map;

public class Mochila {
    public Fruta[] mochila;
    Map<Fruta, Integer> mochilaHash = new HashMap<>();

    // Construtor inicializa a mochila com o tamanho especificado
    public Mochila(int tamanho) {
        this.mochila = new Fruta[tamanho];
    }

    // Método para retornar uma fruta da mochila
    public Fruta retornaFruta(Fruta fruta) {
        // Verifica se a fruta existe no HashMap e se há alguma disponível
        for(int i = 0; i < this.mochila.length; i++) {
        	if (fruta == mochila[i]) {
                System.out.printf("Fruta %s retornada.\n", fruta.nome);
                mochila[i] = null;
                return fruta;
            } else {
                System.out.printf("Nenhuma fruta %s disponível na mochila.\n", fruta.nome);
                return null;
            }
        }
        return null;
    }

    // Método para armazenar uma fruta na mochila
    public void armazenaFruta(Jogador jogador, Terreno terreno) {
    	int xjogador = jogador.getPosicao().getX();
    	int yjogador = jogador.getPosicao().getY();
    	Fruta fruta = null;
    	
    	for(int i = 0; i < terreno.listaFrutas.size(); i++) {
    		fruta = terreno.listaFrutas.get(i);
    		int xfruta = fruta.getPosicao().getX();
    		int yfruta = fruta.getPosicao().getY();
    		
    		if(fruta.noChao && xfruta == xjogador && yfruta == yjogador) {
    			for(int j = 0; j < jogador.tamanhoMochila; j++) {
    				if(jogador.mochilaJogador.mochila[j] == null) {
    					fruta.noChao = false;
    					jogador.mochilaJogador.mochila[j] = fruta;
    				}
    			}
    		}
    	}
    	
        // Verifica se a mochila está cheia antes de armazenar no array
        if (!this.mochilaCheia()) {
            // Procura o primeiro espaço vazio na mochila para armazenar a fruta
            for (int i = 0; i < this.mochila.length; i++) {
                if (this.mochila[i] == null) {
                    this.mochila[i] = fruta;
                    System.out.printf("%s armazenada com sucesso.\n", fruta.nome);
                    break;
                }
            }
        } else {
            System.out.println("Mochila cheia! Não é possível armazenar mais frutas.");
        }
    }

    // Exibe todas as frutas armazenadas na mochila
    public void exibirMochila() {
        for (int i = 0; i < this.mochila.length; i++) {
            if (this.mochila[i] != null) {
                System.out.printf("Fruta %d: %s \n", i + 1, this.mochila[i].nome);
            } else {
                System.out.printf("Fruta %d: [vazio]\n", i);
            }
        }
    }

    // Método para verificar se a mochila está cheia
    public boolean mochilaCheia() {
        // Se houver algum espaço vazio (null), a mochila não está cheia
        for (Fruta fruta : mochila) {
            if (fruta == null) {
                return false;
            }
        }
        // Retorna true se todos os espaços estiverem ocupados
        return true;
    }
}
