package cata_frutas.Elementos.Elementos_Dinâmicos;

import cata_frutas.Terreno;
import cata_frutas.Elementos.Elementos_Estáticos.Grama;

import java.util.ArrayList;

public class Mochila {
    public Fruta[] mochila;

    // Construtor inicializa a mochila com o tamanho especificado
    public Mochila(int tamanho) {
        this.mochila = new Fruta[tamanho];
    }

    // Método para retornar uma fruta da mochila
    public Fruta retornaFruta(int escolha) {
    	Fruta fruta = null;
    	for(int i = 0; i < this.mochila.length; i++) {
    		switch(escolha) {
    		case 1:
    			if(this.mochila[i] instanceof Laranja) {
    				fruta = this.mochila[i];
    			}
    			break;
    		case 2:
    			if(this.mochila[i] instanceof Abacate) {
    				fruta = this.mochila[i];
    			}
    			break;
    		case 3:
    			if(this.mochila[i] instanceof Coco) {
    				fruta = this.mochila[i];
    			}
    			break;
    		case 4:
    			if(this.mochila[i] instanceof Goiaba) {
    				fruta = this.mochila[i];
    			}
    			break;
    		case 5:
    			if(this.mochila[i] instanceof Acerola) {
    				fruta = this.mochila[i];
    			}
    			break;
    		case 6:
    			if(this.mochila[i] instanceof Amora) {
    				fruta = this.mochila[i];
    			}
    			break;
    		}
    	}
    	
    	if(fruta == null) {
    		System.out.println("O tipo de fruta selecionado não existe na mochila do Jogador.");
    		return fruta;
    	}
    	
    	System.out.printf("Fruta %s encontrada na mochila!\n", fruta.nome);
    	System.out.printf("Comendo %s...",fruta.nome);
    	return fruta;
    }

    // Método para armazenar uma fruta na mochila
    public void armazenaFruta(Jogador jogador, Terreno terreno) {
    	Grama grama = null;
    	for(int i = 0; i < terreno.listaGramas.size(); i++) {
    		grama = terreno.listaGramas.get(i);
    		if(grama.getJogador() == jogador) {
    			break;
    		}
    		else {
    			grama = null;
    		}
    	}
    	if(grama == null) {
    		System.out.println(("Não existe fruta no espaço do jogador."));
    		return;
    	}
    	if(!this.mochilaCheia()) {
			for(int j = 0; j < jogador.tamanhoMochila; j++) {
				if(jogador.mochilaJogador.mochila[j] == null) {
					jogador.mochilaJogador.mochila[j] = (Fruta) grama.getFruta();
					System.out.printf("Fruta: %s guardada na mochila do Jogador: %s\n",grama.getFruta().nome, jogador.nome);
					return;
				}
			}
    	}
    	else {
            System.out.println("Mochila cheia! Não é possível armazenar mais frutas.");
        }
    }


    // Exibe todas as frutas armazenadas na mochila
    public void exibirMochila() {
        for (int i = 0; i < this.mochila.length; i++) {
            if (this.mochila[i] != null) {
                System.out.printf("Fruta %d: %s \n", i + 1, this.mochila[i].nome);
            } else {
                System.out.printf("Fruta %d: [vazio]\n", i);
            }
        }
    }

    // Método para verificar se a mochila está cheia
    public boolean mochilaCheia() {
        // Se houver algum espaço vazio (null), a mochila não está cheia
        for (int i = 0; i < this.mochila.length; i++) {
            if (this.mochila[i] == null) {
                return false;
            }
        }
        // Retorna true se todos os espaços estiverem ocupados
        return true;
    }
}
