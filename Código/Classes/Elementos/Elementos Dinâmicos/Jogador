package cata_frutas.Elementos.Elementos_Dinâmicos;

import cata_frutas.Terreno;
import cata_frutas.Elementos.Elemento;
import cata_frutas.Elementos.Elementos_Estáticos.*;

public class Jogador extends Elemento_Dinamico {
	public int id;
	public String nome;
	public int movimentos;
	public int movimentosRestantes;
	public int tamanhoMochila;
	public Mochila mochilaJogador;
	public int Dimensao;
	public boolean debaixoDeArvore;
	
	public Jogador(int x, int y,int tamanhoMochila, int id,int dimensao) {
		super(x,y);
		this.mochilaJogador = new Mochila(tamanhoMochila);
		this.id = id;
		this.Dimensao = dimensao;
	}
	
	
	public void calculoEmpurrao(Jogador pA, Jogador pB) {
		int forcaAtaque = pA.mochilaJogador.mochila.length;
		int forcaDefesa = pB.mochilaJogador.mochila.length;
		
		double log2Atq = Math.log10(forcaAtaque + 1) / Math.log10(2);
		double log2Def = Math.log10(forcaDefesa + 1) / Math.log(2);
		int empurrao = (int) Math.round(log2Atq - log2Def);
		
		System.out.println(empurrao);
		
	}
	
	public void setNome(String nome) {
		this.nome = nome;
	}
	
	public String getNome() {
		return this.nome;
	}
	
	public void setMovimentos() {
		this.movimentosRestantes = ale(120);
		System.out.println(this.movimentosRestantes);
	}
	
	public void saltar(Elemento objeto, int direcao) {
		int x = objeto.getPosicao().getX();
		int y = objeto.getPosicao().getY();
		
		
	}
	
	public Elemento[][] movimentar(int direcao, Terreno terreno) {
		System.out.println(this.movimentosRestantes);
		if(this.movimentosRestantes == 0) {
	    	return terreno.floresta;
	    }
		int x = this.getPosicao().getX();
	    int y = this.getPosicao().getY();
	    int novox = x, novoy = y;
	    
	    switch(direcao) {
	    case 1:
	    	novox = x - 1;
	    	break;
	    case 2:
	    	novox = x + 1;
	    	break;
	    case 3:
	    	novoy = y + 1;
	    	break;
	    case 4:
	    	novoy = y - 1;
	    	break;
	    }
	    
	    if(!verificaPosicao(novox, novoy)) {
	    	return terreno.floresta;
	    }
	    
	    if(debaixoDeArvore) {
	    	if(terreno.floresta[novox][novoy] instanceof Pedra) {
		    	this.setPosicao(x, y);
		    	return terreno.floresta;
		    }
	    	
		    else if(terreno.floresta[novox][novoy] instanceof Jogador) {
		    	this.setPosicao(x, y);
		    	return terreno.floresta;
		    }
	    	
		    else if(terreno.floresta[novox][novoy] instanceof Fruta) {
		    	for(int i = 0; i < terreno.listaArvores.size(); i++) {
		    		if(terreno.listaArvores.get(i).getJogador() == this) {
		    			terreno.listaArvores.get(i).setJogador(null);
		    			this.debaixoDeArvore = false;
		    			}
		    	}
		    	this.mochilaJogador.armazenaFruta((Fruta) terreno.floresta[novox][novoy]);
				this.movimentosRestantes--;
				this.setPosicao(novox, novoy);
				terreno.floresta[novox][novoy] = this;
				return terreno.floresta;
		    }

	    	else if(terreno.floresta[novox][novoy] instanceof Arvore) {
	    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
		    		if(terreno.listaArvores.get(i).getJogador() == this) {
		    			terreno.listaArvores.get(i).setJogador(null);
		    		}
	    		}
		    	Arvore arvore = (Arvore) terreno.floresta[novox][novoy];
		    	arvore.setJogador(this);
		    	this.movimentosRestantes--;
		    	this.setPosicao(novox, novoy);
		    	terreno.floresta[novox][novoy] = arvore;
		    	return terreno.floresta;
		    }
	    	
	    	else {
	    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
		    		if(terreno.listaArvores.get(i).getJogador() == this) {
		    			terreno.listaArvores.get(i).setJogador(null);
		    			this.debaixoDeArvore = false;
		    			}
		    	}
	    		this.movimentosRestantes--;
	    		this.setPosicao(novox, novoy);
	    		terreno.floresta[novox][novoy] = this;
	    		return terreno.floresta;
	    	}
	    }
	    
	    if(terreno.floresta[novox][novoy] instanceof Pedra) {
	    	this.setPosicao(x, y);
	    	return terreno.floresta;
	    }
	    
	    else if(terreno.floresta[novox][novoy] instanceof Jogador) {
	    	this.setPosicao(x, y);
	    	return terreno.floresta;
	    }
	    
	    else if(terreno.floresta[novox][novoy] instanceof Fruta) {
	    	this.mochilaJogador.armazenaFruta((Fruta) terreno.floresta[novox][novoy]);
	    	terreno.floresta[novox][novoy] = this;
		    terreno.floresta[x][y] = new Grama(x,y);
		    this.setPosicao(novox, novoy);
			this.movimentosRestantes--;
			return terreno.floresta;
	    }
	    
	    else if(terreno.floresta[novox][novoy] instanceof Arvore) {
	    	this.debaixoDeArvore = true;
	    	Arvore arvore = (Arvore) terreno.floresta[novox][novoy];
	    	arvore.setJogador(this);
	    	terreno.floresta[novox][novoy] = arvore;
	    	terreno.floresta[x][y] = new Grama(x,y);
	    	this.setPosicao(novox, novoy);
			this.movimentosRestantes--;
	    	return terreno.floresta;
	    }
	    
	    else {
	    	this.setPosicao(novox, novoy);
	    	this.movimentosRestantes--;
	    	terreno.floresta[novox][novoy] = this;
	    	terreno.floresta[x][y] = new Grama(x,y);
	    }
	    
	    return terreno.floresta;
	}
	
	public boolean verificaPosicao(int x, int y) {
		return x >= 0 && x < this.Dimensao && y >= 0 && y < this.Dimensao;
	}
	
}
