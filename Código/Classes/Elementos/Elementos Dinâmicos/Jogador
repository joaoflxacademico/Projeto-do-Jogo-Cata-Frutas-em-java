package cata_frutas.Elementos.Elementos_Dinâmicos;

import cata_frutas.Terreno;
import cata_frutas.Elementos.Elemento;
import cata_frutas.Elementos.Elementos_Estáticos.*;

public class Jogador extends Elemento_Dinamico {
	public int id;
	public String nome;
	public int pontuacao;
	public int movimentosRestantes;
	public int tamanhoMochila;
	public Mochila mochilaJogador;
	public int Dimensao;
	public boolean debaixoDeArvore;
	public boolean doente = false;
	public int forca = 1;
	
	
	public Jogador(int x, int y,int tamanhoMochila, int id,int dimensao) {
		super(x,y);
		this.mochilaJogador = new Mochila(tamanhoMochila);
		this.id = id;
		this.Dimensao = dimensao;
		this.pontuacao = 0;
		this.tamanhoMochila = tamanhoMochila;
	}
	
	public void comerFrutas(int escolha) {
		if(this.mochilaJogador == null) {
			return;
		}
		
		Fruta fruta = null;
		try {
			switch(escolha) {
			case 1:	
				fruta = this.mochilaJogador.retornaFruta(new Laranja(0,0,0));
				break;
			case 2:
				fruta = this.mochilaJogador.retornaFruta(new Abacate(0, 0, 0));
				break;
			case 3:	
				fruta = this.mochilaJogador.retornaFruta(new Coco(0, 0, 0));
				break;
			case 4:
				fruta = this.mochilaJogador.retornaFruta(new Acerola(0, 0, 0));
				break;
			case 5:	
				fruta = this.mochilaJogador.retornaFruta(new Goiaba(0, 0, 0));
				break;
			case 6:
				fruta = this.mochilaJogador.retornaFruta(new Amora(0, 0, 0));
				break;
			}
				
			
			this.doente = fruta.frutaBichada;
			fruta.efeito(this);
			
			System.out.printf("Você comeu a %s \n", fruta.nome);
		}catch(NullPointerException e) {}
		
	}
	
	public Elemento[][] empurrar(Elemento[][] floresta, Jogador pA, Jogador pB) {
		int forcaAtaque = pA.mochilaJogador.mochila.length;
		int forcaDefesa = pB.mochilaJogador.mochila.length;
		
		double log2Atq = this.forca * Math.log10(forcaAtaque + 1) / Math.log10(2);
		double log2Def = Math.log10(forcaDefesa + 1) / Math.log(2);
		int empurrao = (int) Math.round(log2Atq - log2Def);
		
		System.out.printf("O Jogador: %s empurrou %s!!!\n",pA.nome, pB.nome);
		System.out.printf("%d frutas foram derrubadas!!!\n", empurrao);
		
		if(empurrao > 1) {
			floresta = pB.derrubarFrutas(floresta, empurrao, pB);
		}
		
		return floresta;
	}
	
	public void setNome(String nome) {
		this.nome = nome;
	}
	
	public String getNome() {
		return this.nome;
	}
	
	public void setMovimentos() {
		this.movimentosRestantes = ale(12);
	}
	
	public Elemento[][] saltar(int direcao, Terreno terreno, int cont) {
		if(this.movimentosRestantes < (1 + (2 * cont))) {
			System.out.println("Movimentos restantes insuficientes.");
	    	return terreno.florestaEstatica;
	    }
		int x = this.getPosicao().getX();
	    int y = this.getPosicao().getY();
	    int novox = x, novoy = y,xpedra = x, ypedra = y;
	    
	    switch(direcao) {
	    case 1:
	    	novox = x - 2 - (cont-1);
	    	xpedra = novox + 1;
	    	System.out.println(novox + "," + xpedra);
	    	break;
	    case 2:
	    	novox = x + 2 + (cont-1);
	    	xpedra = novox - 1;
	    	System.out.println(novox + "," + xpedra);
	    	break;
	    case 3:
	    	novoy = y + 2 + (cont-1);
	    	ypedra = novoy - 1;
	    	System.out.println(novoy + "," + ypedra);
	    	break;
	    case 4:
	    	novoy = y - 2 - (cont-1);
	    	ypedra = novoy + 1;
	    	System.out.println(novoy + "," + ypedra); 
	    	break;
	    }
	    if(!verificaPosicao(xpedra, ypedra)) {
	    	System.out.println("teste, valor fora da matriz");
	    	return terreno.florestaEstatica;
	    }
	    try {
		    
		    	if(terreno.florestaEstatica[xpedra][ypedra] instanceof Pedra && (cont >= 1)){
			    	
				    if(!verificaPosicao(novox, novoy)){
				    	System.out.println("Movimento inválido, impossível sair da floresta.");
				    	return terreno.florestaEstatica;
				    }

				    Elemento objeto = terreno.florestaEstatica[novox][novoy];
				    
				    if(debaixoDeArvore) {
				    	if(objeto instanceof Pedra) {
				    		System.out.printf("Mais de %d pedras no caminho, pulando novamente.\n",cont);
				    		this.saltar(direcao, terreno,cont + 1);
					    }
				    	
					    else if(objeto instanceof Fruta) {
					    	for(int i = 0; i < terreno.listaArvores.size(); i++) {
					    		if(terreno.listaArvores.get(i).getJogador() == this) {
					    			terreno.listaArvores.get(i).setJogador(null);
					    			this.debaixoDeArvore = false;
					    			}
					    	}
							this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
							this.setPosicao(novox, novoy);
							terreno.florestaEstatica[novox][novoy] = this;
							return terreno.florestaEstatica;
					    }
			
				    	else if(objeto instanceof Arvore && ( ((Arvore) objeto).getJogador() == null)) {
			                System.out.println("Entrando debaixo de uma árvore.");
				    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
					    		if(terreno.listaArvores.get(i).getJogador() == this) {
					    			terreno.listaArvores.get(i).setJogador(null);
					    		}
				    		}
					    	Arvore arvore = (Arvore) terreno.florestaEstatica[novox][novoy];
					    	arvore.setJogador(this);
					    	this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
					    	this.setPosicao(novox, novoy);
					    	terreno.florestaEstatica[novox][novoy] = arvore;
					    	return terreno.florestaEstatica;
					    }
	
				    	else if(objeto instanceof Arvore) {
				    		System.out.println("Não foi possivel entrar na árvore realizando o salto. Há um jogador no caminho.");
				    		this.setPosicao(x, y);
				    		return terreno.florestaEstatica;
				    	}
				    	
					    else if(objeto instanceof Jogador) {
			                System.out.println("Existe um jogador no caminho. Não foi possível sair da árvore realizando o salto.");
					    	this.setPosicao(x, y);
					    	return terreno.florestaEstatica;
					    }
				    	
				    	else {
				    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
					    		if(terreno.listaArvores.get(i).getJogador() == this) {
					    			terreno.listaArvores.get(i).setJogador(null);
					    			this.debaixoDeArvore = false;
					    			}
					    	}
				    		this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
				    		this.setPosicao(novox, novoy);
				    		terreno.florestaEstatica[novox][novoy] = this;
				    		return terreno.florestaEstatica;
				    	}
				    }
				    
				    if(objeto instanceof Pedra) {
				    	this.saltar(direcao,terreno,cont + 1);
				    }
				    
				    else if(objeto instanceof Jogador) {
			            System.out.println("Não foi possível realizar o salto. Existe um jogador no caminho.");
				    	this.setPosicao(x, y);
				    	return terreno.florestaEstatica;
				    }
				    
				    else if(objeto instanceof Fruta) {
				    	terreno.florestaEstatica[novox][novoy] = this;
					    terreno.florestaEstatica[x][y] = new Grama(x,y);
					    this.setPosicao(novox, novoy);
						this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
						return terreno.florestaEstatica;
				    }
				    
				    else if(objeto instanceof Arvore && ( (Arvore) objeto).getJogador() == null) {
			            System.out.println("Entrando debaixo de uma árvore após realizar o salto.");
				    	this.debaixoDeArvore = true;
				    	Arvore arvore = (Arvore) terreno.florestaEstatica[novox][novoy];
				    	arvore.setJogador(this);
				    	terreno.florestaEstatica[novox][novoy] = arvore;
				    	terreno.florestaEstatica[x][y] = new Grama(x,y);
				    	this.setPosicao(novox, novoy);
						this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
				    	return terreno.florestaEstatica;
				    }
				    
			    	else if(objeto instanceof Arvore) {
			    		System.out.println("Não foi possível entrar na árvore. Há um jogador no caminho.");
			    		this.setPosicao(x, y);
			    		return terreno.florestaEstatica;
			    	}
				    
				    else {
				    	this.setPosicao(novox, novoy);
				    	this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
				    	terreno.florestaEstatica[novox][novoy] = this;
				    	terreno.florestaEstatica[x][y] = new Grama(x,y);
				    }
			    }
	    }catch(ArrayIndexOutOfBoundsException e) {
	    	System.out.println("Movimento Inválido, impossível sair da floresta.");
	    }
		    return terreno.florestaEstatica;
	    
	}
	
	
	public Elemento[][] movimentar(int direcao, Terreno terreno) {
		if(this.movimentosRestantes == 0) {
			System.out.println("Sem movimentos.");
	    	return terreno.florestaEstatica;
	    }
		
		int x = this.getPosicao().getX();
	    int y = this.getPosicao().getY();
	    int novox = x, novoy = y;
	    
	    switch(direcao) {
	    case 1:
	    	novox = x - 1;
	    	break;
	    case 2:
	    	novox = x + 1;
	    	break;
	    case 3:
	    	novoy = y + 1;
	    	break;
	    case 4:
	    	novoy = y - 1;
	    	break;
	    }
	    try {
		    Elemento objeto = terreno.florestaEstatica[novox][novoy];
		    
		    if(!verificaPosicao(novox, novoy)) {
		    	System.out.println("Movimento inválido.");
		    	return terreno.florestaEstatica;
		    }
		    
		    if(debaixoDeArvore) {
		    	if(objeto instanceof Pedra) {
	                System.out.println("Tem uma pedra no caminho.");
		    		this.setPosicao(x, y);
			    	return terreno.florestaEstatica;
			    }
		    	
			    else if(objeto instanceof Jogador) {
			    	System.out.println("Empurrando o outro jogador!");
	                terreno.florestaEstatica = this.empurrar(terreno.florestaEstatica, this, (terreno.jogadores[0]  == this ? terreno.jogadores[1] : terreno.jogadores[0]));
			    	this.setPosicao(x, y);
			    	return terreno.florestaEstatica;
			    }
		    	
			    else if(objeto instanceof Grama && ((Grama) objeto).getJogador() == null) {
			    	for(int i = 0; i < terreno.listaArvores.size(); i++) {
			    		if(terreno.listaArvores.get(i).getJogador() == this) {
			    			terreno.listaArvores.get(i).setJogador(null);
			    			this.debaixoDeArvore = false;
			    			}
			    	}
					this.movimentosRestantes--;
					this.setPosicao(novox, novoy);
					return terreno.florestaEstatica;
			    }
	
		    	else if(objeto instanceof Arvore && ( (Arvore) objeto).getJogador() == null) {
	                System.out.println("Entrando debaixo de uma árvore.");
		    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
			    		if(terreno.listaArvores.get(i).getJogador() == this) {
			    			terreno.listaArvores.get(i).setJogador(null);
			    		}
		    		}
			    	Arvore arvore = (Arvore) terreno.florestaEstatica[novox][novoy];
			    	arvore.setJogador(this);
			    	this.movimentosRestantes--;
			    	this.setPosicao(novox, novoy);
			    	terreno.florestaEstatica[novox][novoy] = arvore;
			    	return terreno.florestaEstatica;
			    }
		    	
		    	else if(objeto instanceof Arvore) {
		    		this.empurrar(terreno.florestaEstatica, this, ((Arvore) objeto).getJogador());
		    		this.setPosicao(x, y);
		    		return terreno.florestaEstatica;
		    	}
		    	
		    	else {
		    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
			    		if(terreno.listaArvores.get(i).getJogador() == this) {
			    			terreno.listaArvores.get(i).setJogador(null);
			    			this.debaixoDeArvore = false;
			    			}
			    	}
		    		this.movimentosRestantes--;
		    		this.setPosicao(novox, novoy);
		    		terreno.florestaEstatica[novox][novoy] = this;
		    		return terreno.florestaEstatica;
		    	}
		    }
		    
		    if(objeto instanceof Pedra) {
	            System.out.println("Tem uma pedra no caminho.");
		    	this.setPosicao(x, y);
		    	return terreno.florestaEstatica;
		    }
		    
		    else if(objeto instanceof Jogador) {
		    	System.out.println("Empurrando o outro jogador!");
                terreno.florestaEstatica = this.empurrar(terreno.florestaEstatica, this, (terreno.jogadores[0]  == this ? terreno.jogadores[1] : terreno.jogadores[0]));
		    	this.setPosicao(x, y);
		    	return terreno.florestaEstatica;
		    }
		    
		    else if(objeto instanceof Fruta) {
			    this.setPosicao(novox, novoy);
				this.movimentosRestantes--;
				terreno.florestaEstatica[x][y] = new Grama(x,y);
				return terreno.florestaEstatica;
		    }
		    
		    else if(objeto instanceof Arvore && ((Arvore) objeto).getJogador() == null) {
	            System.out.println("Entrando debaixo de uma árvore.");
		    	this.debaixoDeArvore = true;
		    	Arvore arvore = (Arvore) terreno.florestaEstatica[novox][novoy];
		    	arvore.setJogador(this);
		    	terreno.florestaEstatica[novox][novoy] = arvore;
		    	terreno.florestaEstatica[x][y] = new Grama(x,y);
		    	this.setPosicao(novox, novoy);
				this.movimentosRestantes--;
		    	return terreno.florestaEstatica;
		    }
		    
	    	else if(objeto instanceof Arvore) {
	    		this.empurrar(terreno.florestaEstatica, this, ((Arvore) objeto).getJogador());
	    		this.setPosicao(x, y);
	    		return terreno.florestaEstatica;
	    	}
		    
		    else {
		    	this.setPosicao(novox, novoy);
		    	this.movimentosRestantes--;
		    	terreno.florestaEstatica[novox][novoy] = this;
		    	terreno.florestaEstatica[x][y] = new Grama(x,y);
		    }
	    }
	    catch(ArrayIndexOutOfBoundsException e) {}

	    return terreno.florestaEstatica;
	}
	
	public boolean verificaPosicao(int x, int y) {
		return x >= 0 && x < this.Dimensao && y >= 0 && y < this.Dimensao;
	}
	
	public void encerrarTurno(){
		this.movimentosRestantes = 0;
		this.forca = 1;
		System.out.printf("Encerrando turno do Jogador: %s \n" , this.nome);
	}
	
	public void malEstar() {
		if(this.doente == true) {
			System.out.printf("O Jogador %s está passando mal!!!",this.nome);
			this.encerrarTurno();
		}
	}
	
	public Elemento[][] derrubarFrutas(Elemento[][] floresta, int empurrao, Jogador pB) {
		for(int i = 0; i < Math.max(0, empurrao);i++) {
			int sorte = ale(this.tamanhoMochila - 1);
			Fruta fruta = this.mochilaJogador.mochila[sorte];
			int x = pB.getPosicao().getX();
			int y = pB.getPosicao().getY();
			for(int j = 0; j < 1 ; j++) {
				int somax = ale(1 + j/6);
				int somay = ale(1 + j/6);
				if(verificaPosicao(x + somax, y + somay) && floresta[x + somax][y + somay] instanceof Grama) {
					floresta[x + somax][y + somay] = fruta;
				}
			}
		}
		return floresta;
	}
	
}
