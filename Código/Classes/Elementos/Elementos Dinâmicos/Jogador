package cata_frutas.Elementos.Elementos_Dinâmicos;

import cata_frutas.Terreno;
import cata_frutas.Elementos.Elemento;
import cata_frutas.Elementos.Elementos_Estáticos.*;

public class Jogador extends Elemento_Dinamico {
	public int id;
	public String nome;
	public int pontuacao;
	public int movimentosRestantes;
	public int tamanhoMochila;
	public Mochila mochilaJogador;
	public int Dimensao;
	public boolean debaixoDeArvore;
	public boolean doente = false;
	public int forca = 1;
	
	
	public Jogador(int x, int y,int tamanhoMochila, int id,int dimensao) {
		super(x,y);
		this.mochilaJogador = new Mochila(tamanhoMochila);
		this.id = id;
		this.Dimensao = dimensao;
		this.pontuacao = 0;
	}
	
	public void comerFrutas(int escolha) {
		if(this.mochilaJogador == null) {
			return;
		}
		
		Fruta fruta = null;
		
		switch(escolha) {
		case 1:	
			fruta = this.mochilaJogador.retornaFruta(new Laranja(0, 0, 0));
			break;
		case 2:
			fruta = this.mochilaJogador.retornaFruta(new Abacate(0, 0, 0));
			break;
		case 3:	
			fruta = this.mochilaJogador.retornaFruta(new Coco(0, 0, 0));
			break;
		case 4:
			fruta = this.mochilaJogador.retornaFruta(new Acerola(0, 0, 0));
			break;
		case 5:	
			fruta = this.mochilaJogador.retornaFruta(new Goiaba(0, 0, 0));
			break;
		case 6:
			fruta = this.mochilaJogador.retornaFruta(new Amora(0, 0, 0));
			break;
		}
			
		if(fruta == null) {
			System.out.println("Você não possui essa fruta na sua mochila.");
			return;
		}
		
		this.doente = fruta.frutaBichada;
		fruta.efeito(this);
		
		System.out.printf("Você comeu a %s \n", fruta.nome);
		
	}
	
	public void empurrar(Elemento[][] floresta, Jogador pA, Jogador pB) {
		int forcaAtaque = pA.mochilaJogador.mochila.length;
		int forcaDefesa = pB.mochilaJogador.mochila.length;
		
		double log2Atq = this.forca * Math.log10(forcaAtaque + 1) / Math.log10(2);
		double log2Def = Math.log10(forcaDefesa + 1) / Math.log(2);
		int empurrao = (int) Math.round(log2Atq - log2Def);
		
		if(empurrao > 1) {
			pB.derrubarFrutas(floresta, empurrao);
		}
		
	}
	
	public void setNome(String nome) {
		this.nome = nome;
	}
	
	public String getNome() {
		return this.nome;
	}
	
	public void setMovimentos() {
		this.movimentosRestantes = ale(120);
		System.out.println(this.movimentosRestantes);
	}
	
	public Elemento[][] saltar(int direcao, Terreno terreno, int cont) {
		if(this.movimentosRestantes < (1 + (2 * cont))) {
			System.out.println("Não é possível realizar o salto.");
	    	return terreno.floresta;
	    }
		int x = this.getPosicao().getX();
	    int y = this.getPosicao().getY();
	    int novox = x, novoy = y,xpedra = x, ypedra = y;
	    
	    switch(direcao) {
	    case 1:
	    	novox = x - 2 + (cont-1);
	    	xpedra = x - 1;
	    	break;
	    case 2:
	    	novox = x + 2 + (cont-1);
	    	xpedra = x + 1;
	    	break;
	    case 3:
	    	novoy = y + 2 + (cont-1);
	    	ypedra = y + 1;
	    	break;
	    case 4:
	    	novoy = y - 2 + (cont-1);
	    	ypedra = y - 1; 
	    	break;
	    }
	    Elemento objeto = terreno.floresta[novox][novoy];
	    
	    	if(terreno.floresta[xpedra][ypedra] instanceof Pedra && (cont >= 1)){
		    	
			    if(!verificaPosicao(novox, novoy)){
			    	System.out.println("Movimento inválido.");
					System.out.println(this.movimentosRestantes);
			    	return terreno.floresta;
			    }
			    
			    if(debaixoDeArvore) {
			    	if(objeto instanceof Pedra) {
			    		this.saltar(direcao, terreno,cont + 1);
				    }
			    	
				    else if(objeto instanceof Jogador) {
		                System.out.println("Existe um jogador no caminho.");
				    	this.setPosicao(x, y);
						System.out.println(this.movimentosRestantes);
				    	return terreno.floresta;
				    }
			    	
				    else if(objeto instanceof Fruta) {
				    	for(int i = 0; i < terreno.listaArvores.size(); i++) {
				    		if(terreno.listaArvores.get(i).getJogador() == this) {
				    			terreno.listaArvores.get(i).setJogador(null);
				    			this.debaixoDeArvore = false;
				    			}
				    	}
						this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
						this.setPosicao(novox, novoy);
						terreno.floresta[novox][novoy] = this;
						System.out.println(this.movimentosRestantes);
						return terreno.floresta;
				    }
		
			    	else if(objeto instanceof Arvore && ( ((Arvore) objeto).getJogador() == null)) {
		                System.out.println("Entrando debaixo de uma árvore.");
			    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
				    		if(terreno.listaArvores.get(i).getJogador() == this) {
				    			terreno.listaArvores.get(i).setJogador(null);
				    		}
			    		}
				    	Arvore arvore = (Arvore) terreno.floresta[novox][novoy];
				    	arvore.setJogador(this);
				    	this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
				    	this.setPosicao(novox, novoy);
				    	terreno.floresta[novox][novoy] = arvore;
						System.out.println(this.movimentosRestantes);
				    	return terreno.floresta;
				    }

			    	else if(objeto instanceof Arvore) {
			    		this.setPosicao(x, y);
			    		System.out.println(this.movimentosRestantes);
			    		return terreno.floresta;
			    	}
			    	
			    	else {
			    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
				    		if(terreno.listaArvores.get(i).getJogador() == this) {
				    			terreno.listaArvores.get(i).setJogador(null);
				    			this.debaixoDeArvore = false;
				    			}
				    	}
			    		this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
			    		this.setPosicao(novox, novoy);
			    		terreno.floresta[novox][novoy] = this;
			    		System.out.println(this.movimentosRestantes);
			    		return terreno.floresta;
			    	}
			    }
			    
			    if(objeto instanceof Pedra) {
			    	this.saltar(direcao,terreno,cont + 1);
			    }
			    
			    else if(objeto instanceof Jogador) {
		            System.out.println("Existe um jogador no caminho.");
			    	this.setPosicao(x, y);
					System.out.println(this.movimentosRestantes);
			    	return terreno.floresta;
			    }
			    
			    else if(objeto instanceof Fruta) {
			    	terreno.floresta[novox][novoy] = this;
				    terreno.floresta[x][y] = new Grama(x,y);
				    this.setPosicao(novox, novoy);
					this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
					System.out.println(this.movimentosRestantes);
					return terreno.floresta;
			    }
			    
			    else if(objeto instanceof Arvore && ( (Arvore) objeto).getJogador() == null) {
		            System.out.println("Entrando debaixo de uma árvore.");
			    	this.debaixoDeArvore = true;
			    	Arvore arvore = (Arvore) terreno.floresta[novox][novoy];
			    	arvore.setJogador(this);
			    	terreno.floresta[novox][novoy] = arvore;
			    	terreno.floresta[x][y] = new Grama(x,y);
			    	this.setPosicao(novox, novoy);
					this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
					System.out.println(this.movimentosRestantes);
			    	return terreno.floresta;
			    }
			    
		    	else if(objeto instanceof Arvore) {
		    		this.setPosicao(x, y);
		    		System.out.println(this.movimentosRestantes);
		    		return terreno.floresta;
		    	}
			    
			    else {
			    	this.setPosicao(novox, novoy);
			    	this.movimentosRestantes = this.movimentosRestantes - 2 * cont;
			    	terreno.floresta[novox][novoy] = this;
			    	terreno.floresta[x][y] = new Grama(x,y);
			    }
		    }
	    
	    	System.out.println("Movimento Inválido");
	    
			System.out.println(this.movimentosRestantes);
		    return terreno.floresta;
	    
	}
	
	public Elemento[][] movimentar(int direcao, Terreno terreno) {
		if(this.movimentosRestantes == 0) {
	    	return terreno.floresta;
	    }
		int x = this.getPosicao().getX();
	    int y = this.getPosicao().getY();
	    int novox = x, novoy = y;
	    
	    switch(direcao) {
	    case 1:
	    	novox = x - 1;
	    	break;
	    case 2:
	    	novox = x + 1;
	    	break;
	    case 3:
	    	novoy = y + 1;
	    	break;
	    case 4:
	    	novoy = y - 1;
	    	break;
	    }
	    
	    Elemento objeto = terreno.floresta[novox][novoy];
	    
	    if(!verificaPosicao(novox, novoy)) {
	    	System.out.println("Movimento inválido.");
			System.out.println(this.movimentosRestantes);
	    	return terreno.floresta;
	    }
	    
	    if(debaixoDeArvore) {
	    	if(objeto instanceof Pedra) {
                System.out.println("Tem uma pedra no caminho.");
	    		this.setPosicao(x, y);
	    		System.out.println(this.movimentosRestantes);
		    	return terreno.floresta;
		    }
	    	
		    else if(objeto instanceof Jogador) {
                System.out.println("Existe um jogador no caminho.");
		    	this.setPosicao(x, y);
				System.out.println(this.movimentosRestantes);
		    	return terreno.floresta;
		    }
	    	
		    else if(objeto instanceof Fruta) {
		    	for(int i = 0; i < terreno.listaArvores.size(); i++) {
		    		if(terreno.listaArvores.get(i).getJogador() == this) {
		    			terreno.listaArvores.get(i).setJogador(null);
		    			this.debaixoDeArvore = false;
		    			}
		    	}
				this.movimentosRestantes--;
				this.setPosicao(novox, novoy);
				terreno.floresta[novox][novoy] = this;
				System.out.println(this.movimentosRestantes);
				return terreno.floresta;
		    }

	    	else if(objeto instanceof Arvore && ( (Arvore) objeto).getJogador() == null) {
                System.out.println("Entrando debaixo de uma árvore.");
	    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
		    		if(terreno.listaArvores.get(i).getJogador() == this) {
		    			terreno.listaArvores.get(i).setJogador(null);
		    		}
	    		}
		    	Arvore arvore = (Arvore) terreno.floresta[novox][novoy];
		    	arvore.setJogador(this);
		    	this.movimentosRestantes--;
		    	this.setPosicao(novox, novoy);
		    	terreno.floresta[novox][novoy] = arvore;
				System.out.println(this.movimentosRestantes);
		    	return terreno.floresta;
		    }
	    	
	    	else if(objeto instanceof Arvore) {
	    		this.empurrar(terreno.floresta, this, ((Arvore) objeto).getJogador());
	    		this.setPosicao(x, y);
	    		System.out.println(this.movimentosRestantes);
	    		return terreno.floresta;
	    	}
	    	
	    	else {
	    		for(int i = 0; i < terreno.listaArvores.size(); i++) {
		    		if(terreno.listaArvores.get(i).getJogador() == this) {
		    			terreno.listaArvores.get(i).setJogador(null);
		    			this.debaixoDeArvore = false;
		    			}
		    	}
	    		this.movimentosRestantes--;
	    		this.setPosicao(novox, novoy);
	    		terreno.floresta[novox][novoy] = this;
	    		System.out.println(this.movimentosRestantes);
	    		return terreno.floresta;
	    	}
	    }
	    
	    if(objeto instanceof Pedra) {
            System.out.println("Tem uma pedra no caminho.");
	    	this.setPosicao(x, y);
			System.out.println(this.movimentosRestantes);
	    	return terreno.floresta;
	    }
	    
	    else if(objeto instanceof Jogador) {
            System.out.println("Existe um jogador no caminho.");
	    	this.setPosicao(x, y);
			System.out.println(this.movimentosRestantes);
	    	return terreno.floresta;
	    }
	    
	    else if(objeto instanceof Fruta) {
	    	terreno.floresta[novox][novoy] = this;
		    terreno.floresta[x][y] = new Grama(x,y);
		    this.setPosicao(novox, novoy);
			this.movimentosRestantes--;
			System.out.println(this.movimentosRestantes);
			return terreno.floresta;
	    }
	    
	    else if(objeto instanceof Arvore && ((Arvore) objeto).getJogador() == null) {
            System.out.println("Entrando debaixo de uma árvore.");
	    	this.debaixoDeArvore = true;
	    	Arvore arvore = (Arvore) terreno.floresta[novox][novoy];
	    	arvore.setJogador(this);
	    	terreno.floresta[novox][novoy] = arvore;
	    	terreno.floresta[x][y] = new Grama(x,y);
	    	this.setPosicao(novox, novoy);
			this.movimentosRestantes--;
			System.out.println(this.movimentosRestantes);
	    	return terreno.floresta;
	    }
	    
    	else if(objeto instanceof Arvore) {
    		this.empurrar(terreno.floresta, this, ((Arvore) objeto).getJogador());
    		this.setPosicao(x, y);
    		System.out.println(this.movimentosRestantes);
    		return terreno.floresta;
    	}
	    
	    else {
	    	this.setPosicao(novox, novoy);
	    	this.movimentosRestantes--;
	    	terreno.floresta[novox][novoy] = this;
	    	terreno.floresta[x][y] = new Grama(x,y);
	    }

		System.out.println(this.movimentosRestantes);
	    return terreno.floresta;
	}
	
	public boolean verificaPosicao(int x, int y) {
		return x >= 0 && x < this.Dimensao && y >= 0 && y < this.Dimensao;
	}
	
	public void encerrarTurno(){
		this.movimentosRestantes = 0;
		this.forca = 1;
		System.out.printf("Encerrando turno do Jogador: %s \n" , this.nome);
	}
	
	public void malEstar() {
		if(this.doente == true) {
			this.encerrarTurno();
		}
	}
	
	public void derrubarFrutas(Elemento[][] floresta, int empurrao) {
		for(int i = 0; i < empurrao; i++) {
			int posicao = ale(this.tamanhoMochila);
			int x = this.getPosicao().getX();
			int y = this.getPosicao().getY();
			int novox = ale(1) + x;
			int novoy = ale(1) + y;
			Fruta fruta = this.mochilaJogador.mochila[x];
			this.mochilaJogador.mochila[x] = null;
			if(floresta[x][y] instanceof Grama) {
				floresta[novox][novoy] = fruta;
			}
		}
	}
	
}
