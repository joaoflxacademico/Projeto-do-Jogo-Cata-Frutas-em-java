package cata_frutas;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import java.io.*;
import java.io.BufferedReader;
import java.io.Writer;
import java.io.FileWriter;
import java.io.IOException;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;

import javax.print.attribute.standard.JobHoldUntil;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicScrollBarUI;



public class Frame extends JFrame {

	private static final long serialVersionUID = 1L;
	private static JPanel painel1;
	private static JPanel painelini;
	private static JPanel painelIJ;
	private static JPanel painelCT;
	private static JPanel painelIT;
	private static CustomPanel painelTE;
	private static JPanel painelAR;
	private static JPanel painelIN;
	
	private static JFrame frameIN;
	private static JFrame frameAR;
	
	public JLabel logo;
	public JLabel caixasaidas;
	public JLabel caixasaidas2;
	public JLabel caixasaidas3;
	
	public JScrollPane scroll;
	public JScrollPane scrollIN;
	public JScrollPane scrollTE;
	public JScrollPane scrollTE2;
	
	public static Color cor1 = new Color(255,238,138);
	public static Color cor2 = new Color(0,0,0);
	public static LineBorder borda1 = new LineBorder(cor2);
	public static LineBorder borda2 = new LineBorder(cor1);
	public static String nomeArquivo;
	public ArrayList<Botoes> listaBotoes;
	
	public Botoes botaoIJ;
	public Botoes botaoMJ;
	public Botoes botaoIN;
	public Botoes botaoM;
	public Botoes botaoRI;
	public Botoes botaoCT;
	public Botoes botaoIT;
	public Botoes botaoEN;
	public Botoes botaoTE;
	public Botoes botaoRC;
	public Botoes botaoEN2;
	public Botoes botaoStart;
	public Botoes botaoRT;
	public Botoes botaoST;
	public Botoes botaoNT;
	public Botoes botaoRI2;
	
	public static ImageIcon imglogo = new ImageIcon("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\Logo.png");
    
	public static int[][] Matriz;
	public static int Dimensao;
	public static int Pedras;
	public static int[] Arvores;
	public static int[] Frutas;
	public static int Mochila;
	public static float Bichada;
	public static int frutasTotais;
	public static int arvoresTotais;
	public static int  corGrama = 1;
	public String userInput;
	
	JTextArea caixatexto;
	JTextArea caixatexto2;
	JTextArea caixainstru;
	JTextField caixatexto3;
	
	
	GridBagConstraints gbc; 
	
	public static boolean uiaceita = false;
	public static String memoriaEN[][] = new String[11][3];
	public static int xbtn = 0;
	public static int ybtn = 0;
	public static int xbtn2 = 0;
	public static int ybtn2 = 0;
	
	
	
	class Botoes extends JButton{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		public int cont = 1;
		
		public Botoes(String text, Color cor1, Color cor2, LineBorder borda1, LineBorder borda2, int x, int y) {
		
			this.setText(text);
			this.setBackground(cor1);
			this.setForeground(cor2);
			this.setBorder(borda1);
			this.setBounds(x, y, 120, 40);
			this.setFocusPainted(false);
			this.setFont(new Font("Segoe UI Semibold", Font.ITALIC, 12));
			this.hover();
			
			
		}
		
		
		
		public void update(Color cor1, Color cor2, LineBorder borda1, LineBorder borda2) {
			this.setBackground(cor1);
			this.setForeground(cor2);
			this.setBorder(borda1);
			this.hover();
		}
		
		
		public void hover() {
			this.addMouseListener(new MouseAdapter() {
	            @Override
	            public void mouseEntered(MouseEvent e) {
	                // Alterar a cor ao passar o mouse (hover)
	                Botoes.this.setBackground(cor2);
	                Botoes.this.setForeground(cor1);
	                Botoes.this.setBorder(borda2);
	            }

	            @Override
	            public void mouseExited(MouseEvent e) {
	                // Voltar à cor original quando o mouse sair
	            	Botoes.this.setBackground(cor1);
	            	Botoes.this.setForeground(cor2);
	            	Botoes.this.setBorder(borda1);
	            }
			});
		}
		
		
		public void mode(ArrayList<Botoes> listaBotoes) {
			Color var = cor1;
			LineBorder var2 = new LineBorder(cor2);
			cor1 = cor2;
			cor2 = var;
			var = cor1;
			
			borda1 = borda2;
			borda2 = var2;
			var2 = borda1;
			
			painel1.setBackground(cor1);
			painelIJ.setBackground(cor1);
			painelIN.setBackground(cor1);
			painelini.setBackground(cor1);
			painelCT.setBackground(cor1);
			painelIT.setBackground(cor1);
			painelTE.setBackground(cor1);
			painelAR.setBackground(cor1);
			caixasaidas.setForeground(cor2);
			caixasaidas2.setForeground(cor2);
			caixasaidas3.setForeground(cor2);
			caixainstru.setForeground(cor2);
			if(corGrama == 1) {
				corGrama = 0;
				painelTE.updateImagem("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama +".png");
			}
			else {
				corGrama = 1;
				painelTE.updateImagem("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama +".jpg");
			}
			logo.setForeground(cor2);
			for(int i = 0; i < listaBotoes.size(); i++) {
				listaBotoes.get(i).update(cor1, cor2, borda1, borda2);
			}
		}
		
	}

	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Frame frame = new Frame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	
	
	

	/**
	 * Create the frame.
	 */
	public Frame() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(600,400);
		setLocationRelativeTo(null);
		setResizable(false);
		setIconImage(imglogo.getImage());
		setTitle("Cata Frutas");
		inicializa();
		
		
	}
	
	public void inicializa() {
		
		
		
		painel1 = new JPanel();
		painel1.setBorder(new EmptyBorder(5, 5, 5, 5));
		painel1.setBackground(cor1);
		painel1.setBounds(0, 0, 600, 400);
		painel1.setLayout(new BorderLayout(0, 0));
		
		logo = new JLabel("Cata Frutas");
		logo.setHorizontalAlignment(SwingConstants.CENTER);
		logo.setFont(new Font("Georgia", Font.ITALIC, 48));
		logo.setForeground(cor2);
		logo.setIcon(null);
		logo.setBounds(10, 10, painel1.getX(), painel1.getY());
		painel1.add(logo, BorderLayout.NORTH);
		
		
		painelini = 
				new JPanel();
		painelini.setBackground(new Color(255, 238, 138));
		painelini.setLayout(null);
		painel1.add(painelini, BorderLayout.CENTER);
				
		painelIJ = new JPanel();
		painelIJ.setLayout(null);
		painelIJ.setBackground(painel1.getBackground());
		
		painelIN = new JPanel();
		painelIN.setLayout(null);
		painelIN.setBackground(cor1);
		
		painelCT = new JPanel();
		painelCT.setLayout(null);
		painelCT.setBackground(painel1.getBackground());
		
		painelIT = new JPanel();
		painelIT.setLayout(null);
		painelIT.setBackground(painel1.getBackground());
		
		painelTE = new CustomPanel("C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama" + corGrama + ".jpg");
		painelTE.setLayout(new GridBagLayout());
		
				
		xbtn = (int) (painel1.getWidth()/2) - 75;
		ybtn = (int) (painel1.getHeight()/2 - 130);
		
		setContentPane(painel1);
		
		listaBotoes = new ArrayList<Botoes>();
		
		
		botaoIJ = new Botoes("Iniciar Jogo",cor1,cor2,borda1,borda2,xbtn,ybtn);
		listaBotoes.add(botaoIJ);
		
		botaoMJ = new Botoes("Modos de Jogo",cor1,cor2,borda1,borda2,xbtn,ybtn + 42);
		listaBotoes.add(botaoMJ);
		
		botaoIN = new Botoes("Instruções",cor1,cor2,borda1,borda2,xbtn,ybtn + 84);
		listaBotoes.add(botaoIN);
		
		botaoM = new Botoes("Light Mode",cor1,cor2,borda1,borda2,xbtn,ybtn + 126);
		listaBotoes.add(botaoM);
		
		
		
		botaoCT = new Botoes("Criar Terreno",cor1,cor2,borda1,borda2,xbtn,ybtn);
		listaBotoes.add(botaoCT);
		
		botaoIT = new Botoes("Importar Terreno",cor1,cor2,borda1,borda2,xbtn,ybtn+42);
		listaBotoes.add(botaoIT);
		
		botaoRI = new Botoes("Retornar",cor1,cor2,borda1,borda2,xbtn,ybtn + 84);
		listaBotoes.add(botaoRI);
		
		
		
		caixasaidas = new JLabel("Entradas");
		caixasaidas.setHorizontalAlignment(SwingConstants.CENTER);
		caixasaidas.setFont(new Font("Georgia", Font.ITALIC, 12));
		caixasaidas.setForeground(cor2);
		caixasaidas.setIcon(null);
		caixasaidas.setBounds(xbtn-190, ybtn-80, 500, 40);
		
		caixatexto = new JTextArea();
		caixatexto.setBorder(borda1);
		caixatexto.setFont(caixasaidas.getFont());
		caixatexto.setLineWrap(true); 
		caixatexto.setWrapStyleWord(true);
		
		scroll = new JScrollPane(caixatexto);
		scroll.setBounds(xbtn-30, ybtn-50, 180, 90); 
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scroll.setBorder(borda1);
		
		scroll.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
            @Override
            protected void configureScrollBarColors() {
                this.thumbColor = cor2;   // Cor da parte deslizante (thumb)
                this.trackColor = new Color(240,240,240);  // Cor do trilho (track)
                this.thumbHighlightColor = cor1;  // Cor de destaque do thumb
                this.thumbDarkShadowColor = new Color(30, 100, 200); // Cor da sombra do thumb
                this.trackHighlightColor = new Color(150, 150, 150); // Cor de destaque do trilho
            }

            @Override
            protected JButton createDecreaseButton(int orientation) {
                return createZeroButton();  // Remove o botão de diminuir (rolar para cima)
            }

            @Override
            protected JButton createIncreaseButton(int orientation) {
                return createZeroButton();  // Remove o botão de aumentar (rolar para baixo)
            }

            private JButton createZeroButton() {
                JButton button = new JButton();
                button.setPreferredSize(new Dimension(0, 0));  // Define o tamanho do botão como 0
                return button;
            }
        });
		
		botaoEN = new Botoes("Enviar",cor1,cor2,borda1,borda2,xbtn,ybtn);
		botaoEN.setBounds(xbtn, ybtn + 42, 120, 42);
		listaBotoes.add(botaoEN);
		
		botaoTE = new Botoes("Terreno Exemplo",cor1,cor2,borda1,borda2,xbtn,ybtn + 86);
		listaBotoes.add(botaoTE);
		
		botaoStart = new Botoes("Começar Jogo",cor1,cor2,borda1,borda2,xbtn,ybtn + 128);
		listaBotoes.add(botaoStart);
		
		botaoRC = new Botoes("Retornar",cor1,cor2,borda1,borda2,xbtn,ybtn + 170);
		listaBotoes.add(botaoRC);
		
		
		
		
		caixasaidas2 = new JLabel("Caminho");
		caixasaidas2.setHorizontalAlignment(SwingConstants.CENTER);
		caixasaidas2.setFont(new Font("Georgia", Font.ITALIC, 14));
		caixasaidas2.setForeground(cor2);
		caixasaidas2.setIcon(null);
		caixasaidas2.setBounds(xbtn-190, ybtn-42, 500, 40);
		
		caixatexto2 = new JTextArea();
		caixatexto2.setBorder(borda1);
		caixatexto2.setFont(caixasaidas2.getFont());
		caixatexto2.setLineWrap(true); 
		caixatexto2.setWrapStyleWord(true); 
		caixatexto2.setBounds(xbtn - 140, ybtn, 400, 40);
		
		
		
		botaoEN2 = new Botoes("Enviar",cor1,cor2,borda1,borda2,xbtn,ybtn + 44);
		listaBotoes.add(botaoEN2);
		
		botaoRT = new Botoes("Retornar",cor1,cor2,borda1,borda2, 1366/2 - 75 , 720/2 + 325);
		listaBotoes.add(botaoRT);
		
		botaoST = new Botoes("Salvar Terreno",cor1,cor2,borda1,borda2, 1366/2 - 75 , 720/2 + 283);
		listaBotoes.add(botaoST);
		
		botaoNT = new Botoes("Novo Terreno",cor1,cor2,borda1,borda2, 1366/2 - 75 , 100);
		listaBotoes.add(botaoNT);
		
		
		frameAR = new JFrame();
		frameAR.setTitle("Nome Terreno");
		frameAR.setIconImage(imglogo.getImage());
		frameAR.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frameAR.setSize(300,150);
		frameAR.setLocationRelativeTo(null);
		frameAR.setResizable(false);
		frameAR.setVisible(false);
		
		painelAR = new JPanel();
		painelAR.setLayout(null);
		painelAR.setBackground(painel1.getBackground());
		frameAR.add(painelAR);
		
		caixasaidas3 = new JLabel("Nome do Arquivo");
		caixasaidas3.setHorizontalAlignment(SwingConstants.CENTER);
		caixasaidas3.setFont(new Font("Georgia", Font.ITALIC, 14));
		caixasaidas3.setForeground(cor2);
		caixasaidas3.setBounds(0, 10, 300, 50);
		painelAR.add(caixasaidas3);
		
		caixatexto3 = new JTextField();
		caixatexto3.setHorizontalAlignment(SwingConstants.CENTER);
		caixatexto3.setBorder(borda1);
		caixatexto3.setFont(caixasaidas3.getFont());
		caixatexto3.setBounds(50, 50, 200, 30);
		caixatexto3.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                	receberTexto();
                	try {
    					SalvarTerreno();
    				} catch (IOException | InterruptedException e1) {
    					// TODO Auto-generated catch block
    					e1.printStackTrace();
    				}
                }
            }
        });
		painelAR.add(caixatexto3);
		
		frameIN = new JFrame();
		frameIN.setTitle("Instruções");
		frameIN.setIconImage(imglogo.getImage());
		frameIN.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frameIN.setSize(800,500);
		frameIN.setLocationRelativeTo(null);
		frameIN.setResizable(false);
		frameIN.setVisible(false);
		
		
		botaoRI2 = new Botoes("Retornar",cor1,cor2,borda1,borda2,xbtn + 100,ybtn + 340);
		listaBotoes.add(botaoRI2);
		
		caixainstru = new JTextArea(
			    "Regras do Jogo:\n"
			    	    + "1 - Movimentação:\n"
			    	    + "	Cada competidor lança dois dados no início de sua vez para determinar os pontos de movimento disponíveis.\n"
			    	    + "	O competidor pode se mover para células adjacentes (cima, baixo, esquerda, direita) até que os pontos de\n"
			    	    + "	movimento se esgotem.\n"
			    	    + "	Movimentos e interações possíveis:\n"
			    	    + "		Grama: movimentar-se custa 1 ponto.\n"
			    	    + "		Árvore: movimentar-se custa 1 ponto. Permanecer 1 turno sem se mover garante uma fruta,\n"
			    	    + "	com um limite de uma fruta a cada 5 turnos.\n"
			    	    + "		Pedra: não pode ser ocupada, mas pode ser pulada ao custo de 3 pontos.\n"
			    	    + "		Frutas: coletar uma fruta custa 1 ponto (a mesma de andar na grama), e ela é colocada na mochila\n"
			    	    + "	do competidor.\n"
			    	    + "	A movimentação termina quando todos os pontos são usados ou o jogador decide finalizar seu turno.\n"
			    	    + "\n"
			    	    + "2 - Interação com Frutas:\n"
			    	    + "	Ao entrar em uma célula com uma fruta, o competidor pode coletá-la e colocá-la na sua mochila.\n"
			    	    + "	Frutas podem ser usadas para fortalecer o competidor ou para efeitos especiais\n"
			    	    + "	(como aumento de força ou agilidade).\n"
			    	    + "	Frutas \"bichadas\" impedem o competidor de se mover no próximo turno, a menos que ele coma uma laranja.\n"
			    	    + "\n"
			    	    + "3 - Conflitos entre Competidores:\n"
			    	    + "	Quando dois competidores tentam entrar em células adjacentes, ocorre um empurrão. O competidor da vez\n"
			    	    + "	empurra o adversário, derrubando frutas da mochila do outro competidor.\n"
			    	    + "	A quantidade de frutas derrubadas é calculada usando a força do ataque e da defesa de cada competidor:\n"
			    	    + "		Força de Ataque (fa) = quantidade de frutas no atacante.\n"
			    	    + "		Força de Defesa (fd) = quantidade de frutas no defensor.\n"
			    	    + "	O número de frutas derrubadas é calculado como:\n"
			    	    + "		empurrão = round(log2(fa + 1)) - round(log2(fd + 1))\n"
			    	    + "	O defensor perde um número de frutas igual ao valor do empurrão (ou todas as frutas se tiver menos que o valor).\n"
			    	    + "\n"
			    	    + "4 - Mochila e Limite de Frutas:\n"
			    	    + "	Cada competidor tem uma mochila com uma capacidade limitada de frutas. Quando a mochila atinge o limite,\n"
			    	    + "	o competidor deve consumir ou perder frutas antes de coletar mais.\n"
			    	    + "	A força do competidor aumenta conforme ele coleta frutas, tornando-o mais forte em confrontos.\n"
			    	    + "\n"
			    	    + "5 - Condicional de Vitória:\n"
			    	    + "	O jogo termina quando um dos competidores acumula mais da metade dos maracujás (frutas ouro)\n"
			    	    + "	em sua mochila.\n"
			    	    + "	A verificação de vitória é feita no início de cada turno. O competidor que atingir o número necessário de maracujás\n"
			    	    + "	vence na rodada seguinte.\n"
			    	    + "6 - Controles:\n"
			    	    + "	6.1 - Movimento:"
			    	    + "		Via teclado: use as setas direcionais para mover o competidor.\n"
			    	    + "		Via mouse: clique na célula adjacente desejada para mover o competidor.\n"
			    	    + "	6.2 - Ações:"
			    	    + "		Coletar frutas: o competidor coleta automaticamente ao entrar na célula com a fruta.\n"
			    	    + "		Consumir frutas: pode ser feito a qualquer momento durante o turno,\n"
			    	    + "		selecionando uma fruta na mochila.\n"
			    	    + "		Finalizar turno: pressione o botão de \"Concluir Jogada\" para passar a vez ao outro competidor.\n"
			    	);
		caixainstru.setLineWrap(false);  // Quebra automática de linha
		caixainstru.setWrapStyleWord(true);  // Quebra de linha em palavras inteiras
		caixainstru.setFont(new Font("Georgia", Font.ITALIC, 12));
		caixainstru.setForeground(cor2);
		caixainstru.setBackground(painelIN.getBackground());
		caixainstru.setEditable(false);  // Impede edição do texto
		caixainstru.setOpaque(false);  // Torna o fundo transparente para combinar com o painel

		
		
		scrollIN = new JScrollPane(caixainstru);
		scrollIN.setBounds(16, 30, 750, 360);
		scrollIN.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scrollIN.setBorder(borda1);
		scrollIN.setOpaque(false);  // Torna o fundo do JScrollPane transparente
		scrollIN.getViewport().setOpaque(false);  // Torna a área de exibição transparente
		
		scrollIN.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
	            @Override
	            protected void configureScrollBarColors() {
	                this.thumbColor = cor2;   // Cor da parte deslizante (thumb)
	                this.trackColor = new Color(240,240,240);  // Cor do trilho (track)
	                this.thumbHighlightColor = cor1;  // Cor de destaque do thumb
	                this.thumbDarkShadowColor = new Color(30, 100, 200); // Cor da sombra do thumb
	                this.trackHighlightColor = new Color(150, 150, 150); // Cor de destaque do trilho
	            }

	            @Override
	            protected JButton createDecreaseButton(int orientation) {
	                return createZeroButton();  // Remove o botão de diminuir (rolar para cima)
	            }

	            @Override
	            protected JButton createIncreaseButton(int orientation) {
	                return createZeroButton();  // Remove o botão de aumentar (rolar para baixo)
	            }

	            private JButton createZeroButton() {
	                JButton button = new JButton();
	                button.setPreferredSize(new Dimension(0, 0));  // Define o tamanho do botão como 0
	                return button;
	            }
	        });
		
		frameIN.add(painelIN);	
		painelIN.add(scrollIN);
		painelIN.add(botaoRI2);
		
		
		
		
		painelInicio();
		
		
		botaoIJ.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
					botaoClickado(botaoIJ);
					painelIniciarJogo();
				}
			});
		
		botaoCT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
					botaoClickado(botaoCT);
					painelCriacaoTerreno();
				}
			});
		
		botaoIT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoIT);
				painelImportarTerreno();
				}
			});
		
		botaoRI.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRI);
				painelInicio();
				revalidate();
				repaint();
			}
		});
		
		
		
		botaoRC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRC);
				painelIniciarJogo();
			}
		});

		
		botaoM.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
					if(botaoM.getText().equals("Light Mode")){
						botaoM.mode(listaBotoes);
						botaoM.setText("Dark Mode");
						revalidate();
						repaint();
					}
					else{
						botaoM.mode(listaBotoes);
						botaoM.setText("Light Mode");
						revalidate();
						repaint();
					}
				}
			});

		
		botaoEN.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	uiaceita = false;
            	
                userInput = caixatexto.getText();
                
                if(userInput.isEmpty() || userInput.isBlank()) {
                	caixasaidas.setText("Erro: A entrada não pode ser vazia.");
                	return;
                }
                
                caixatexto.setText(userInput);
                String[] linhas = userInput.split("\n"); // Divide o texto em linhas
                
             // Processar as linhas
                for (int j = 0; j < linhas.length; j++) {
                    String linha = linhas[j].trim(); // Remove espaços extras
                    String[] partes = linha.split(" ");
                    
                    
                    if(((j <= 1) || (j >= 9)) && partes.length > 2) {
                    	caixasaidas.setText("Erro: formato da linha " + (j + 1) + " inválido.");
                        return;
                    }
                    else if(partes.length == 2) { // Para "dimensao" e "pedras"
                        memoriaEN[j][0] = partes[0];
                        memoriaEN[j][1] = partes[1];
                        memoriaEN[j][2] = ""; // Deixa o terceiro campo vazio
                    }
                    else if(partes.length == 3) { // Para frutas
                        memoriaEN[j][0] = partes[0]; // Nome da fruta
                        memoriaEN[j][1] = partes[1]; // Quantidade de árvores
                        memoriaEN[j][2] = partes[2]; // Quantidade de frutas    
                    } 
                    
                    else{
                        caixasaidas.setText("Erro: formato da linha " + (j + 1) + " inválido.");
                        return; // Sai da função se houver erro no formato da linha
                    }
                }

                // Chama a função de verificação do terreno após processar as entradas
                boolean resultado = verificaTerreno();
                if (resultado) {
                    caixasaidas.setText("Entradas aceitas.");
                }
            }
        });
		
		
		botaoEN2.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        botaoClickado(botaoEN2);
		        File arquivoTerreno = new File(caixatexto2.getText());
		        userInput = caixatexto2.getText();
		        if(userInput.isEmpty() || userInput.isBlank()) {
		        	caixasaidas2.setText("Erro: O caminho não pode ser vazio.");
		            return;
		        }
		        if (!arquivoTerreno.exists()) {
		            caixasaidas2.setText("Path inválido. Tente Novamente");
		            return;
		        }
		        final int MAX_LINES = 11;
		        String[] linhas = new String[MAX_LINES];

		        try (BufferedReader BFR = new BufferedReader(new FileReader(arquivoTerreno))) {
		            for (int i = 0; i < MAX_LINES; i++) {
		                linhas[i] = BFR.readLine();
		                if (linhas[i] == null) break; // Stop if there are fewer than MAX_LINES
		            }

		            for (int j = 0; j < linhas.length; j++) {
		                if (linhas[j] == null) break; // Handle case where file has fewer lines
		                String linha = linhas[j].trim(); // Remove spaces
		                String[] partes = linha.split(" ");

		                if ((j <= 1 || j >= 9) && partes.length > 2) {
		                    caixasaidas2.setText("Erro: formato da linha " + (j + 1) + " inválido.");
		                    return;
		                } else if (partes.length == 2) {
		                    memoriaEN[j][0] = partes[0];
		                    memoriaEN[j][1] = partes[1];
		                    memoriaEN[j][2] = ""; // Leave the third field empty
		                    System.out.println(memoriaEN[j][0]);
		                    System.out.println(memoriaEN[j][1]);
		                    System.out.println(memoriaEN[j][2]);
		                } else if (partes.length == 3) {
		                    memoriaEN[j][0] = partes[0]; // Name of the fruit
		                    memoriaEN[j][1] = partes[1]; // Number of trees
		                    memoriaEN[j][2] = partes[2]; // Number of fruits
		                    System.out.println(memoriaEN[j][0]);
		                    System.out.println(memoriaEN[j][1]);
		                    System.out.println(memoriaEN[j][2]);
		                } else {
		                    caixasaidas2.setText("Erro: formato da linha " + (j + 1) + " inválido.");
		                    return; // Exit the function if there's an error in line format
		                }
		                
		                
			            if (verificaTerreno()) {
			                caixasaidas2.setText("Entradas aceitas.");
			            }
		            }

		        } catch (IOException e1) {
		            caixasaidas2.setText("Erro ao ler o arquivo: " + e1.getMessage());
		        }
		    }
		});
		
		
		
		
		botaoTE.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoTE);
				if(verificaTerreno()) {
					setExtendedState(MAXIMIZED_BOTH);
					painelTerrenoExemplo();
				    Matriz = new int[Dimensao][Dimensao];
					terrenoExemploSist();
					criandoTerreno();				
					}
			}
		});
		
		
		botaoST.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoTE);
				frameAR.setVisible(true);
				
			}
		});
		
		
		
		botaoRT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRT);
				setSize(600, 400);
				setLocationRelativeTo(null);
				setResizable(false);
				painelIniciarJogo();
			}
		});
		
		botaoNT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoNT);
				terrenoExemploSist();
				criandoTerreno();
			}
		});
		
		botaoIN.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoIN);
				painelInstrucoes();
			}
		});
		
		
		botaoRI2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRI);
				frameIN.setVisible(false);
				revalidate();
				repaint();
			}
		});
	}
	
	public void botaoClickado(Botoes botao) {
		botao.setBackground(botaoM.getBackground());
		botao.setForeground(botaoM.getForeground());
		botao.setBorder(botaoM.getBorder());
		revalidate();
		repaint();
	}
	
	public void painelInicio() {
		painelini.add(botaoIJ);
		painelini.add(botaoMJ);
		painelini.add(botaoIN);
		painelini.add(botaoM);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelini);
		revalidate();
		repaint();
	}
	
	public void painelIniciarJogo() {
		painelIJ.add(botaoCT);
		painelIJ.add(botaoIT);
		painelIJ.add(botaoRI);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelIJ, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	public void painelInstrucoes() {
		frameIN.setVisible(true);
		revalidate();
		repaint();
	}
	
	public void painelCriacaoTerreno() {
		painelCT.add(caixasaidas);
		painelCT.add(scroll);
		painelCT.add(botaoEN);
		painelCT.add(botaoTE);
		painelCT.add(botaoStart);
		painelCT.add(botaoRC);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelCT, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	public void painelImportarTerreno() {
		painelIT.add(caixasaidas2);
		painelIT.add(caixatexto2);
		painelIT.add(botaoEN2);
		painelIT.add(botaoTE);
		painelIT.add(botaoStart);
		painelIT.add(botaoRC);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelIT, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	public void painelTerrenoExemplo() {
		painel1.removeAll();
		painel1.add(botaoRT);
		painel1.add(botaoST);
		painel1.add(botaoNT);
		painel1.add(logo, BorderLayout.NORTH);	
		gbc = new GridBagConstraints();
		gbc.weightx = 0;
		gbc.weighty = 0;
		gbc.insets = new Insets (0,0,0,0);
		gbc.anchor = GridBagConstraints.CENTER;
		painelTE.setBounds(1366/2, 720/2 , 300, 300);
		scrollTE = new JScrollPane(painelTE); 
		scrollTE.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		scrollTE.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
		scrollTE.setBorder(borda1);
		painelTE.setBackground(cor1);
		painelTE.setBorder(borda1);
		painel1.add(painelTE, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	

	 
	public void SalvarTerreno() throws IOException, InterruptedException {
	    caixasaidas3.setText("O nome do arquivo");
	    
	    // Verifica se o nome do arquivo foi preenchido
	    if (nomeArquivo == null || nomeArquivo.isEmpty()) {
	        caixasaidas3.setText("O nome do arquivo não pode estar vazio.");
	        Thread.sleep(4000); // Pausa de 2 segundos para que o usuário veja a mensagem
	        return; // Retorna sem chamar o método novamente, evitando recursão
	    }

	    // Define o caminho onde o arquivo será salvo
	    String caminho = "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\";
	    File arquivoTerreno = new File(caminho + nomeArquivo + ".txt"); // Adiciona a extensão ".txt"

	    // Cria o escritor do arquivo
	    Writer escritor = new FileWriter(arquivoTerreno);

	    // Escreve os dados de memoriaEN no arquivo
	    for (int i = 0; i < memoriaEN.length; i++) {
	        for (int j = 0; j < 3; j++) {
	            escritor.write(memoriaEN[i][j]);
	            escritor.write(" ");
	        }
	        escritor.write(System.getProperty("line.separator")); // Nova linha
	    }

	    // Fecha o escritor e confirma a operação
	    escritor.flush();
	    escritor.close();

	    // Exibe mensagem de sucesso
	    caixasaidas3.setText("Arquivo salvo com sucesso: " + nomeArquivo);
	    Thread.sleep(4000); // Pausa de 2 segundos para que o usuário veja a mensagem

	    // Fecha o frame e reseta os campos
	    frameAR.setVisible(false);
	    caixatexto3.setText(null); // Limpa o campo de texto
	    caixasaidas3.setText("O nome do arquivo");
	}

	
	public void receberTexto() {
		nomeArquivo = caixatexto3.getText();
	}
	
	public void TerrenoExemplo() {
	    painel1.removeAll();
	    painel1.add(botaoRT);
	    painel1.add(botaoST);
	    painel1.add(logo, BorderLayout.NORTH);
 
	    
	    gbc = new GridBagConstraints();

	    painelTE.setBackground(cor1);
	    painelTE.setBorder(borda1);

	    scrollTE = new JScrollPane(painelTE);
	    scrollTE.setBounds(50, 50, 1366/2 + 300 , 720/2);
	    scrollTE.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
	    scrollTE.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

	    painel1.add(scrollTE);

		
	    revalidate();
	    repaint();
	}
	
	
	
	public ImageIcon criandoImagem(int tamanho, String Caminho) {
		ImageIcon img = new ImageIcon(Caminho);
	    Image img1 = img.getImage().getScaledInstance(tamanho, tamanho, Image.SCALE_SMOOTH);
	    img = new ImageIcon(img1);
	    return img;
	}
	

	public void criandoTerreno() {
		int tamanhoCelula = 480 / Dimensao;
		painelTE.setLayout(new GridBagLayout());  // Mantém o layout
	    painelTE.removeAll();
	    painelTE.removeAll();  // Limpa o painel antes de recriar as células
	    
	    ImageIcon imgjogador1 = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\UpView guy-1.png");
	    ImageIcon imgjogador2 = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\UpView guy-2.png");
	    ImageIcon imgArvoreAbacate = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreAbacate.png");
	    ImageIcon imgArvoreAmora = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreAmora.png");
	    ImageIcon imgArvoreLaranja = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreLaranja.png");
	    ImageIcon imgArvoreAcerola= criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\arvoreAcerola.png");
	    ImageIcon imgArvoreGoiaba= criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreGoiaba.png");
	    ImageIcon imgArvoreCoco = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\ArvoreCoco.png");
	    ImageIcon imgFrutaMaracuja = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\maracuja.png");
	    ImageIcon imgFrutaLaranja = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\laranja.png"); 
	    ImageIcon imgFrutaAbacate = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\abacate.png");
	    ImageIcon imgFrutaGoiaba = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\goiaba.png");
	    ImageIcon imgFrutaAmora = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\amora.png");
	    ImageIcon imgFrutaCoco = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\coco.png");
	    ImageIcon imgFrutaAcerola = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\acerola.png");
	    ImageIcon imggrama = criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\grama.jpeg");
	    ImageIcon imgPedra= criandoImagem(tamanhoCelula, "C:\\Users\\ander\\João Vitor\\Estudos\\UFS\\Trabalhos\\Cata Frutas-POO\\Páginas\\pedra.png");
	    
	    
	    for (int i = 0; i < Dimensao; i++) {
	        for (int j = 0; j < Dimensao; j++) {
	    	    JButton celula = new JButton();
	    	    celula.setBorder(borda1);
	            celula.setBackground(null);
	            celula.setOpaque(false);
	            if(Matriz[i][j] > 0 && Matriz[i][j] < 3) {
	            	switch(Matriz[i][j]) {
	            	case 1:
	            		celula.setIcon(imgjogador1);
	            		break;
	            	case 2:
	            		celula.setIcon(imgjogador2);
	            		break;
	            	}
	            }
	            else if(Matriz[i][j] > 99 && Matriz[i][j] < 200) {
	            	celula.setIcon(imgPedra);
	            }
	            else if(Matriz[i][j] > 199 && Matriz[i][j] < 300) {
	            	switch(Matriz[i][j]) {
	            	case 201:
	            		celula.setIcon(imgArvoreLaranja);
	            		break;
	            	case 202:
	            		celula.setIcon(imgArvoreAbacate);
	            		break;
	            	case 203:
	            		celula.setIcon(imgArvoreCoco);
	            		break;
	            	case 204:
	            		celula.setIcon(imgArvoreAcerola);
	            		break;
	            	case 205:
	            		celula.setIcon(imgArvoreAmora);
	            		break;
	            	case 206:
	            		celula.setIcon(imgArvoreGoiaba);
	            		break;
	            	}
	            }
	            else if(Matriz[i][j] > 299 && Matriz[i][j] < 400) {
	            	switch(Matriz[i][j]) {
	            	case 300:
	            		celula.setIcon(imgFrutaMaracuja);
	            		break;
	            	case 301:
	            		celula.setIcon(imgFrutaLaranja);
	            		break;
	            	case 302:
	            		celula.setIcon(imgFrutaAbacate);
	            		break;
	            	case 303:
	            		celula.setIcon(imgFrutaCoco);
	            		break;
	            	case 304:
	            		celula.setIcon(imgFrutaAcerola);
	            		break;
	            	case 305:
	            		celula.setIcon(imgFrutaAmora);
	            		break;
	            	case 306:
	            		celula.setIcon(imgFrutaGoiaba);
	            		break;
	            	}
	            }
	            else{
	            	celula.setIcon(imggrama);
	            }
	            celula.setPreferredSize(new Dimension(tamanhoCelula, tamanhoCelula));

	            gbc.gridx = j;
	            gbc.gridy = i;
	            painelTE.add(celula, gbc);
	        }
	    }
	    revalidate();
	    repaint();
	}
	
	
	public int ale(int i) {
		return (int) Math.round(Math.random()*i);
	}
	
	
	public void terrenoExemploSist() {

	    Matriz = new int[Dimensao][Dimensao];
	    System.out.println(arvoresTotais);
	    System.out.println(frutasTotais);
	    System.out.println(Pedras);

	    // Inicializa o terreno com zeros
	    for (int i = 0; i < Dimensao; i++) {
	        for (int j = 0; j < Dimensao; j++) {
	            Matriz[i][j] = 0;
	        }
	    }
	    System.out.println("iniciado");

	    // Colocar Pedras
	    for (int p = 0; p < Pedras; p++) {
	        int x = ale(Dimensao - 1);
	        int y = ale(Dimensao - 1);
	        Matriz[x][y] = 100;
	        System.out.println("pedra");// Pedra representada por 100
	    }

	    // Colocar Árvores
	    for(int i = 1; i < 7; i++) {
		    for (int a = 0; a < Arvores[i];) {
		        int x = ale(Dimensao - 1);
		        int y = ale(Dimensao - 1);
		        if (Matriz[x][y] == 0) { // Verifica se a posição está livre
		            Matriz[x][y] = 200 + i; // Árvore representada por 200 + tipo
		            a++;
		            System.out.println("arvore"+i);
		        }
		    }
	    }

	    // Colocar Frutas
	    for(int j = 0; j < 7; j++) {
		    for (int f = 0; f < Frutas[j];) {
		        int x = ale(Dimensao - 1);
		        int y = ale(Dimensao - 1);
		        if (Matriz[x][y] == 0) { // Verifica se a posição está livre
		            Matriz[x][y] = 300 + j; // Fruta representada por 300 + tipo
		            f++;
		            System.out.println("fruta"+j);
		        }
		    }
	    }

	    // Colocar Jogadores
	    for (int j = 1; j < 3;) {
	        int x = ale(Dimensao - 1);
	        int y = ale(Dimensao - 1);
	        if (Matriz[x][y] == 0) { // Verifica se a posição está livre
	            Matriz[x][y] = j; // Jogador representado por 1 e 2
	            j++;
	            System.out.println("jogador");
	        }
	    }

	    // Imprimir o terreno
	    imprimirMatriz(Matriz);

	}
	
	// Função para imprimir a matriz
	
	private void imprimirMatriz(int[][] matriz) {
	    for (int k = 0; k < Dimensao; k++) {
	        for (int l = 0; l < Dimensao; l++) {
	            System.out.print(matriz[k][l] + " | ");
	        }
	        System.out.println();
	    }
	}

	
	
	public boolean verificaTerreno() {
		arvoresTotais = 0;
		frutasTotais = 0;
		Frutas = new int[7];
		Arvores = new int[7];
		try {
			
			int dimensao = Integer.parseInt(memoriaEN[0][1]);
			Dimensao = dimensao;
			int pedra = Integer.parseInt(memoriaEN[1][1]);
			Pedras = pedra;
			int espacosDisponiveis = dimensao*dimensao - pedra - 2;
			int[] arvores = new int[7];
			int[] frutas = new int[7];
			float bichada = Integer.parseInt(memoriaEN[9][1]);
			Bichada = bichada;
			int mochila = Integer.parseInt(memoriaEN[10][1]);
			Mochila = mochila;
			
			for(int i = 0; i < 7; i++) {
				arvores[i] = Integer.parseInt(memoriaEN[i+2][1]);
				frutas[i] = Integer.parseInt(memoriaEN[i+2][2]);
				
				if (arvores[i] < 0 || frutas[i] < 0) {
	                caixasaidas.setText("Erro: A quantidade de árvores e frutas não pode ser negativa.");
	                uiaceita =  false;
	                break;
	            }
				frutasTotais += frutas[i];
				Frutas[i] = frutas[i];
				Arvores[i] = arvores[i];
			}
			
			for(int j = 1; j < 7; j++) {
				arvoresTotais += arvores[j];
			}
			
			espacosDisponiveis -= frutasTotais - arvoresTotais;
			
			
			if(dimensao <= 2) {
	            caixasaidas.setText("Erro: A dimensão do terreno deve ser pelo menos três.");
	            uiaceita = false;
	        }
			else if(pedra < 0) {
	            caixasaidas.setText("Erro: A quantidade de pedras não pode ser negativa.");
	            uiaceita = false;
	        }
			else if(arvores[0]%2 == 0) {
				caixasaidas.setText("Erro: O número de maracujás deve ser um valor impar.");
				uiaceita = false;
			}
			else if(bichada < 0 || bichada > 100) {
	            caixasaidas.setText("Erro: A porcentagem de frutas bichadas deve estar entre 0 e 100.");
	            uiaceita = false;
	        }
			else if(mochila <= 0) {
	            caixasaidas.setText("Erro: O tamanho da mochila deve ser maior que zero.");
	            uiaceita = false;
	        }
			else if(mochila < (1 + Math.floor((arvores[0])/2))) {
				caixasaidas.setText("Erro: o tamanho da mochila deve ser maior que metade +1 do nº de maracujás.");
			}
			else if(espacosDisponiveis < 0) {
				caixasaidas.setText("Erro: A quantidade dos elementos supera o tamanho livre no terreno.");
				uiaceita = false;
			}
			else if(espacosDisponiveis >= 0) {
				uiaceita = true;
			}
		} catch (NumberFormatException e) {
	        // Captura erros de formato nos números
	        caixasaidas.setText("Erro: Verifique se todas as entradas são números válidos.");
	        uiaceita = false;
		}
		return uiaceita;
		
		
	}
	
	
	public class ImageInPanel extends JPanel {
	    /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Image image;

	    // Construtor que carrega a imagem
	    public ImageInPanel(String imagePath) {
	        // Carrega a imagem a partir do caminho fornecido
	        image = new ImageIcon(imagePath).getImage();
	    }

	    // Sobrescreve o método paintComponent para desenhar a imagem
	    @Override
	    protected void paintComponent(Graphics g) {
	        super.paintComponent(g); // Chama o método da classe pai para garantir o comportamento padrão
	        // Desenha a imagem no painel
	        if (image != null) {
	            g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
	        }
	    }
	}

	
	
	public class CustomPanel extends JPanel {
	    /**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Image backgroundImage;

	    // Construtor que carrega a imagem de fundo
	    public CustomPanel(String imagePath) {
	        backgroundImage = new ImageIcon(imagePath).getImage();
	    }

	    @Override
	    protected void paintComponent(Graphics g) {
	        super.paintComponent(g);
	        // Desenha a imagem de fundo cobrindo todo o painel
	        g.drawImage(backgroundImage, 0, 0, 1366, 766, this);
	    }
	    
	    public void updateImagem(String imagePath) {
	    	this.backgroundImage = new ImageIcon(imagePath).getImage();
	    }
	}


}
