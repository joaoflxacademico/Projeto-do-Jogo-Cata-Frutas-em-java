package cata_frutas;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;



public class Frame extends JFrame {

	private static final long serialVersionUID = 1L;
	private static JPanel painel1;
	private static JPanel painelini;
	private static JPanel painelIJ;
	private static JPanel painelCT;
	private static JPanel painelIT;
	private static JPanel painelTE;
	
	public JLabel logo;
	public JLabel caixasaidas;
	public JLabel caixasaidas2;
	
	public JScrollPane scroll;
	
	public static Color cor1 = new Color(255,238,138);
	public static Color cor2 = new Color(0,0,0);
	public static LineBorder borda1 = new LineBorder(cor2);
	public static LineBorder borda2 = new LineBorder(cor1);
	public ArrayList<Botoes> listaBotoes;
	
	public Botoes botaoIJ;
	public Botoes botaoMJ;
	public Botoes botaoIN;
	public Botoes botaoM;
	public Botoes botaoRI;
	public Botoes botaoCT;
	public Botoes botaoIT;
	public Botoes botaoEN;
	public Botoes botaoTE;
	public Botoes botaoRC;
	public Botoes botaoEN2;
	public Botoes botaoStart;
	public Botoes botaoRT;
	
	public static int Dimensao;
	public static int Pedras;
	public static int[] Arvores;
	public static int[] Frutas;
	public static int Mochila;
	public static float Bichada;
	public static int frutasTotais;
	public static int arvoresTotais;
	
	JTextArea caixatexto;
	JTextArea caixatexto2;
	
	public static boolean uiaceita = false;
	public static String memoriaEN[][];
	public static int xbtn = 0;
	public static int ybtn = 0;
	public static int xbtn2 = 0;
	public static int ybtn2 = 0;
	
	
	
	class Botoes extends JButton{
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		public int cont = 1;
		
		public Botoes(String text, Color cor1, Color cor2, LineBorder borda1, LineBorder borda2, int x, int y) {
		
			this.setText(text);
			this.setBackground(cor1);
			this.setForeground(cor2);
			this.setBorder(borda1);
			this.setBounds(x, y, 120, 40);
			this.setFocusPainted(false);
			this.setFont(new Font("Segoe UI Semibold", Font.ITALIC, 12));
			this.hover();
			
			
		}
		
		
		
		public void update(Color cor1, Color cor2, LineBorder borda1, LineBorder borda2) {
			this.setBackground(cor1);
			this.setForeground(cor2);
			this.setBorder(borda1);
			this.hover();
		}
		
		
		public void hover() {
			this.addMouseListener(new MouseAdapter() {
	            @Override
	            public void mouseEntered(MouseEvent e) {
	                // Alterar a cor ao passar o mouse (hover)
	                Botoes.this.setBackground(cor2);
	                Botoes.this.setForeground(cor1);
	                Botoes.this.setBorder(borda2);
	            }

	            @Override
	            public void mouseExited(MouseEvent e) {
	                // Voltar à cor original quando o mouse sair
	            	Botoes.this.setBackground(cor1);
	            	Botoes.this.setForeground(cor2);
	            	Botoes.this.setBorder(borda1);
	            }
			});
		}
		
		
		public void mode(ArrayList<Botoes> listaBotoes) {
			Color var = cor1;
			LineBorder var2 = new LineBorder(cor2);
			cor1 = cor2;
			cor2 = var;
			var = cor1;
			
			borda1 = borda2;
			borda2 = var2;
			var2 = borda1;
			
			painel1.setBackground(cor1);
			painelIJ.setBackground(cor1);
			painelini.setBackground(cor1);
			painelCT.setBackground(cor1);
			painelIT.setBackground(cor1);
			painelTE.setBackground(cor1);
			caixasaidas.setForeground(cor2);
			caixasaidas2.setForeground(cor2);
			logo.setForeground(cor2);
			for(int i = 0; i < listaBotoes.size(); i++) {
				listaBotoes.get(i).update(cor1, cor2, borda1, borda2);
			}
		}
		
	}

	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					Frame frame = new Frame();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	
	

	/**
	 * Create the frame.
	 */
	public Frame() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setSize(600,400);
		setLocationRelativeTo(null);
		setResizable(false);
		
		
		inicializa();
		
		
	}
	
	public void inicializa() {
		
		painel1 = new JPanel();
		painel1.setBorder(new EmptyBorder(5, 5, 5, 5));
		painel1.setBackground(cor1);
		painel1.setBounds(0, 0, 600, 400);
		painel1.setLayout(new BorderLayout(0, 0));
		
		logo = new JLabel("Cata Frutas");
		logo.setHorizontalAlignment(SwingConstants.CENTER);
		logo.setFont(new Font("Georgia", Font.ITALIC, 48));
		logo.setForeground(cor2);
		logo.setIcon(null);
		logo.setBounds(10, 10, painel1.getX(), painel1.getY());
		painel1.add(logo, BorderLayout.NORTH);
		
		
		painelini = new JPanel();
		painelini.setBackground(new Color(255, 238, 138));
		painelini.setLayout(null);
		painel1.add(painelini, BorderLayout.CENTER);
				
		painelIJ = new JPanel();
		painelIJ.setLayout(null);
		painelIJ.setBackground(painel1.getBackground());
		
		painelCT = new JPanel();
		painelCT.setLayout(null);
		painelCT.setBackground(painel1.getBackground());
		
		painelIT = new JPanel();
		painelIT.setLayout(null);
		painelIT.setBackground(painel1.getBackground());
		
		painelTE = new JPanel();
		painelTE.setLayout(null);
		painelTE.setBackground(cor1);
		
		xbtn = (int) (painel1.getWidth()/2) - 75;
		ybtn = (int) (painel1.getHeight()/2 - 130);
		
		setContentPane(painel1);
		
		listaBotoes = new ArrayList<Botoes>();
		
		
		botaoIJ = new Botoes("Iniciar Jogo",cor1,cor2,borda1,borda2,xbtn,ybtn);
		listaBotoes.add(botaoIJ);
		
		botaoMJ = new Botoes("Modos de Jogo",cor1,cor2,borda1,borda2,xbtn,ybtn + 42);
		listaBotoes.add(botaoMJ);
		
		botaoIN = new Botoes("Instruções",cor1,cor2,borda1,borda2,xbtn,ybtn + 84);
		listaBotoes.add(botaoIN);
		
		botaoM = new Botoes("Light Mode",cor1,cor2,borda1,borda2,xbtn,ybtn + 126);
		listaBotoes.add(botaoM);
		
		
		
		botaoCT = new Botoes("Criar Terreno",cor1,cor2,borda1,borda2,xbtn,ybtn);
		listaBotoes.add(botaoCT);
		
		botaoIT = new Botoes("Importar Terreno",cor1,cor2,borda1,borda2,xbtn,ybtn+42);
		listaBotoes.add(botaoIT);
		
		botaoRI = new Botoes("Retornar",cor1,cor2,borda1,borda2,xbtn,ybtn + 84);
		listaBotoes.add(botaoRI);
		
		
		
		caixasaidas = new JLabel("Entradas");
		caixasaidas.setHorizontalAlignment(SwingConstants.CENTER);
		caixasaidas.setFont(new Font("Georgia", Font.ITALIC, 12));
		caixasaidas.setForeground(cor2);
		caixasaidas.setIcon(null);
		caixasaidas.setBounds(xbtn-190, ybtn-50, 500, 40);
		
		caixatexto = new JTextArea();
		caixatexto.setBorder(borda1);
		caixatexto.setFont(caixasaidas.getFont());
		caixatexto.setLineWrap(true); 
		caixatexto.setWrapStyleWord(true);
		
		scroll = new JScrollPane(caixatexto);;
		scroll.setBounds(xbtn-30, ybtn-20, 180, 60); 
		scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		scroll.setBorder(borda1);
		
		botaoEN = new Botoes("Enviar",cor1,cor2,borda1,borda2,xbtn,ybtn);
		botaoEN.setBounds(xbtn, ybtn + 42, 120, 42);
		listaBotoes.add(botaoEN);
		
		botaoTE = new Botoes("Terreno Exemplo",cor1,cor2,borda1,borda2,xbtn,ybtn + 86);
		listaBotoes.add(botaoTE);
		
		botaoStart = new Botoes("Começar Jogo",cor1,cor2,borda1,borda2,xbtn,ybtn + 128);
		listaBotoes.add(botaoStart);
		
		botaoRC = new Botoes("Retornar",cor1,cor2,borda1,borda2,xbtn,ybtn + 170);
		listaBotoes.add(botaoRC);
		
		
		
		
		caixasaidas2 = new JLabel("Caminho");
		caixasaidas2.setHorizontalAlignment(SwingConstants.CENTER);
		caixasaidas2.setFont(new Font("Georgia", Font.ITALIC, 12));
		caixasaidas2.setForeground(cor2);
		caixasaidas2.setIcon(null);
		caixasaidas2.setBounds(xbtn-190, ybtn-42, 500, 40);
		
		caixatexto2 = new JTextArea();
		caixatexto2.setBorder(borda1);
		caixatexto2.setFont(caixasaidas2.getFont());
		caixatexto2.setLineWrap(true); 
		caixatexto2.setWrapStyleWord(true); 
		caixatexto2.setBounds(xbtn - 140, ybtn, 400, 30);
		
		
		
		botaoEN2 = new Botoes("Enviar",cor1,cor2,borda1,borda2,xbtn,ybtn + 44);
		listaBotoes.add(botaoEN2);
		
		botaoRT = new Botoes("Retornar",cor1,cor2,borda1,borda2,xbtn2,ybtn2 + 126);
		listaBotoes.add(botaoRT);
		
		painelInicio();
		
		botaoIJ.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
					botaoClickado(botaoIJ);
					painelIniciarJogo();
				}
			});
		
		botaoCT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
					botaoClickado(botaoCT);
					painelCriacaoTerreno();
				}
			});
		
		botaoIT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoIT);
				painelImportarTerreno();
				}
			});
		
		botaoRI.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRI);
				painelInicio();
				revalidate();
				repaint();
			}
		});
		
		
		
		botaoRC.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRC);
				painelIniciarJogo();
			}
		});

		
		botaoM.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
					if(botaoM.getText().equals("Light Mode")){
						botaoM.mode(listaBotoes);
						botaoM.setText("Dark Mode");
						revalidate();
						repaint();
					}
					else{
						botaoM.mode(listaBotoes);
						botaoM.setText("Light Mode");
						revalidate();
						repaint();
					}
				}
			});

		
		botaoEN.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	memoriaEN = new String[11][3];
            	uiaceita = false;
            	
                String userInput = caixatexto.getText();
                caixatexto.setText(userInput);
                String[] linhas = userInput.split("\n"); // Divide o texto em linhas
                
             // Processar as linhas
                for (int j = 0; j < linhas.length; j++) {
                    String linha = linhas[j].trim(); // Remove espaços extras
                    String[] partes = linha.split(" ");
                    
                    
                    if(((j <= 1) || (j >= 9)) && partes.length > 2) {
                    	caixasaidas.setText("Erro: formato da linha " + (j + 1) + " inválido.");
                        return;
                    }
                    else if(partes.length == 2) { // Para "dimensao" e "pedras"
                        memoriaEN[j][0] = partes[0];
                        memoriaEN[j][1] = partes[1];
                        memoriaEN[j][2] = ""; // Deixa o terceiro campo vazio
                    }
                    else if(partes.length == 3) { // Para frutas
                        memoriaEN[j][0] = partes[0]; // Nome da fruta
                        memoriaEN[j][1] = partes[1]; // Quantidade de árvores
                        memoriaEN[j][2] = partes[2]; // Quantidade de frutas    
                    } 
                    
                    else{
                        caixasaidas.setText("Erro: formato da linha " + (j + 1) + " inválido.");
                        return; // Sai da função se houver erro no formato da linha
                    }
                }

                // Chama a função de verificação do terreno após processar as entradas
                boolean resultado = verificaTerreno();
                if (resultado) {
                    caixasaidas.setText("Entradas aceitas.");
                }
            }
        });
		
		
		
		
		botaoTE.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoTE);
				setExtendedState(MAXIMIZED_BOTH);
				painelTerrenoExemplo();
				terrenoExemplo();
			}
		});
		
		
		botaoRT.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				botaoClickado(botaoRT);
				setSize(600, 400);
				setLocationRelativeTo(null);
				setResizable(false);
				painelIniciarJogo();
			}
		});
			
		
		
		
	}
	
	public void botaoClickado(Botoes botao) {
		botao.setBackground(botaoM.getBackground());
		botao.setForeground(botaoM.getForeground());
		botao.setBorder(botaoM.getBorder());
		revalidate();
		repaint();
	}
	
	public void painelInicio() {
		painelini.add(botaoIJ);
		painelini.add(botaoMJ);
		painelini.add(botaoIN);
		painelini.add(botaoM);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelini);
		revalidate();
		repaint();
	}
	
	public void painelIniciarJogo() {
		painelIJ.add(botaoCT);
		painelIJ.add(botaoIT);
		painelIJ.add(botaoRI);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelIJ, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	public void painelCriacaoTerreno() {
		painelCT.add(caixasaidas);
		painelCT.add(scroll);
		painelCT.add(botaoEN);
		painelCT.add(botaoTE);
		painelCT.add(botaoStart);
		painelCT.add(botaoRC);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelCT, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	public void painelImportarTerreno() {
		painelIT.add(caixasaidas2);
		painelIT.add(caixatexto2);
		painelIT.add(botaoEN2);
		painelIT.add(botaoTE);
		painelIT.add(botaoStart);
		painelIT.add(botaoRC);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelIT, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	public void painelTerrenoExemplo() {
		painelTE.add(botaoRT);
		painel1.removeAll();
		painel1.add(logo, BorderLayout.NORTH);
		painel1.add(painelTE, BorderLayout.CENTER);
		revalidate();
		repaint();
	}
	
	
	public int ale(int i) {
		return (int) Math.round(Math.random()*i);
	}
	
	public void terrenoExemplo() {
		int[][] matrizTerreno = new int[Dimensao][Dimensao];
		
		System.out.println(arvoresTotais);
		System.out.println(frutasTotais);
		System.out.println(Pedras);
		
		
		for(int i = 0; i < Dimensao; i++) {
			for(int j = 0; j < Dimensao; j++) {
					matrizTerreno[i][j] = 0;
			}
		}
		
		for(int p = 0; p < Pedras; p++) {
			int x = ale(Dimensao - 1);
			int y = ale(Dimensao - 1);
			matrizTerreno[x][y] = 100;
		}
		
		for(int a = 0; a < arvoresTotais; a++) {
			int x = ale(Dimensao - 1);
			int y = ale(Dimensao - 1);
				if(matrizTerreno[x][y] == 0) {
					matrizTerreno[x][y] = 200 + a;
				}
				x = ale(Dimensao - 1);
				y = ale(Dimensao - 1);
		}
		
		for(int f = 0; f < arvoresTotais; f++) {
			int x = ale(Dimensao - 1);
			int y = ale(Dimensao - 1);
				if(matrizTerreno[x][y] == 0) {
					matrizTerreno[x][y] = 300 + f;
				}
				x = ale(Dimensao - 1);
				y = ale(Dimensao - 1);
		}
		
		
		for(int j = 1; j <= 2; j++) {
			int x = ale(Dimensao - 1);
			int y = ale(Dimensao - 1);
			for(;matrizTerreno[x][y] == 0;) {
				if(matrizTerreno[x][y] == 0) {
					matrizTerreno[x][y] = j;
					break;
				}
				x = ale(Dimensao - 1);
				y = ale(Dimensao - 1);
			}
		}
		
		
		for(int k = 0; k < Dimensao; k++) {
			for(int l = 0; l < Dimensao; l++) {
				System.out.print(matrizTerreno[k][l]);
				System.out.print(" | ");
			}
			System.out.println();
		}
		
		arvoresTotais = 0;
		frutasTotais = 0;
		
		
	}
	
	public boolean verificaTerreno() {
		
		try {
			int dimensao = Integer.parseInt(memoriaEN[0][1]);
			Dimensao = dimensao;
			int pedra = Integer.parseInt(memoriaEN[1][1]);
			Pedras = pedra;
			int espacosDisponiveis = dimensao*dimensao - pedra - 2;
			int[] arvores = new int[7];
			int[] frutas = new int[7];
			float bichada = Integer.parseInt(memoriaEN[9][1]);
			Bichada = bichada;
			int mochila = Integer.parseInt(memoriaEN[10][1]);
			Mochila = mochila;
			
			for(int i = 0; i < 7; i++) {
				arvores[i] = Integer.parseInt(memoriaEN[i+2][1]);
				frutas[i] = Integer.parseInt(memoriaEN[i+2][2]);
				
				if (arvores[i] < 0 || frutas[i] < 0) {
	                caixasaidas.setText("Erro: A quantidade de árvores e frutas não pode ser negativa.");
	                uiaceita =  false;
	                break;
	            }
				frutasTotais += frutas[i];
			}
			
			for(int j = 1; j < 7; j++) {
				arvoresTotais += arvores[j];
			}
			
			espacosDisponiveis -= frutasTotais - arvoresTotais;
			
			
			if(dimensao <= 2) {
	            caixasaidas.setText("Erro: A dimensão do terreno deve ser pelo menos três.");
	            uiaceita = false;
	        }
			else if(pedra < 0) {
	            caixasaidas.setText("Erro: A quantidade de pedras não pode ser negativa.");
	            uiaceita = false;
	        }
			else if(bichada < 0 || bichada > 100) {
	            caixasaidas.setText("Erro: A porcentagem de frutas bichadas deve estar entre 0 e 100.");
	            uiaceita = false;
	        }
			else if(mochila <= 0) {
	            caixasaidas.setText("Erro: O tamanho da mochila deve ser maior que zero.");
	            uiaceita = false;
	        }
			else if(mochila < (1 + Math.floor((arvores[0])/2))) {
				caixasaidas.setText("Erro: o tamanho da mochila deve ser maior que metade +1 do nº de maracujás.");
			}
			else if(espacosDisponiveis < 0) {
				caixasaidas.setText("Erro: A quantidade dos elementos supera o tamanho livre no terreno.");
				uiaceita = false;
			}
			else if(espacosDisponiveis >= 0) {
				uiaceita = true;
			}
		} catch (NumberFormatException e) {
	        // Captura erros de formato nos números
	        caixasaidas.setText("Erro: Verifique se todas as entradas são números válidos.");
	        uiaceita = false;
		}
		return uiaceita;
		
		
	}
	


}
